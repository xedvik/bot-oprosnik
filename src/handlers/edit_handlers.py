"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
"""

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler

from models.states import *
from handlers.base_handler import BaseHandler
from utils.sheets import GoogleSheets
from utils.logger import get_logger

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = get_logger()

class EditHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, sheets: GoogleSheets, application=None):
        super().__init__(sheets)
        self.questions_with_options = self.sheets.get_questions_with_options()
        self.questions = list(self.questions_with_options.keys())
        self.application = application
    
    async def edit_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", "–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
        if not self.questions:
            await update.message.reply_text(
                "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        keyboard = []
        for i, question in enumerate(self.questions):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            short_question = question[:30] + "..." if len(question) > 30 else question
            keyboard.append([KeyboardButton(f"{i+1}. {short_question}")])
        
        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        return CHOOSING_QUESTION
    
    async def handle_question_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        choice = update.message.text
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", "–í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞", details={"–≤—ã–±–æ—Ä": choice})
        
        if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –≤—ã–±–æ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: "1. –í–æ–ø—Ä–æ—Å")
            question_num = int(choice.split('.')[0]) - 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if 0 <= question_num < len(self.questions):
                logger.data_processing("–≤–æ–ø—Ä–æ—Å—ã", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞", details={"user_id": user_id})
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                selected_question = self.questions[question_num]
                context.user_data['editing_question'] = selected_question
                context.user_data['editing_question_num'] = question_num
                
                logger.admin_action(user_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", "–í—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å", 
                                  details={"–≤–æ–ø—Ä–æ—Å": selected_question, "–Ω–æ–º–µ—Ä": question_num})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                keyboard = [
                    [KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")],
                    [KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")],
                    [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f"–í—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å: {selected_question}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
                return EDITING_QUESTION
            else:
                logger.error("invalid_question_number", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞", 
                           details={"–Ω–æ–º–µ—Ä": question_num, "–º–∞–∫—Å–∏–º—É–º": len(self.questions)-1}, 
                           user_id=user_id)
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
        except (ValueError, IndexError):
            logger.error("question_choice_processing_error", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞", 
                       details={"–≤—ã–±–æ—Ä": choice}, user_id=user_id)
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
    
    async def handle_edit_menu_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        choice = update.message.text
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        logger.admin_action(user_id, "–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", details={"–≤—ã–±–æ—Ä": choice})
        
        if 'editing_question' not in context.user_data:
            logger.error("editing_question_missing", "–í–æ–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                        user_id=user_id, details={"handler": "handle_edit_menu_choice"})
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        question = context.user_data['editing_question']
        logger.data_processing("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", details={"–≤–æ–ø—Ä–æ—Å": question})
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        question_num = context.user_data.get('editing_question_num')
        if question_num is None:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ
            try:
                question_num = self.questions.index(question)
                context.user_data['editing_question_num'] = question_num
                logger.data_processing("–≤–æ–ø—Ä–æ—Å—ã", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞", details={"–Ω–æ–º–µ—Ä": question_num, "–≤–æ–ø—Ä–æ—Å": question})
            except ValueError:
                logger.error("question_not_found", "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ", 
                          user_id=user_id, details={"–≤–æ–ø—Ä–æ—Å": question})
                question_num = -1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        has_options = bool(self.questions_with_options[question])
        logger.data_processing("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤", details={"–Ω–∞–ª–∏—á–∏–µ_–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤": has_options, "–≤–æ–ø—Ä–æ—Å": question})
        
        if choice == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞":
            logger.admin_action(user_id, "–í—ã–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞", details={"–≤–æ–ø—Ä–æ—Å": question})
            await update.message.reply_text(
                f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:\n{question}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
            return EDITING_QUESTION_TEXT
            
        elif choice == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤":
            logger.admin_action(user_id, "–í—ã–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤", details={"–≤–æ–ø—Ä–æ—Å": question})
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            keyboard = [
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç")],
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")],
                [KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç")],
                [KeyboardButton("‚ú® –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º")],
                [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            current_options = self.questions_with_options[question]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            options_text = ""
            for opt in current_options:
                if isinstance(opt, dict) and "text" in opt:
                    options_text += f"‚Ä¢ {opt['text']}"
                    if "sub_options" in opt:
                        if opt["sub_options"] == []:
                            options_text += " üìù (—Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ–¥–æ—Ç–≤–µ—Ç)\n"
                        elif opt.get("sub_options"):
                            options_text += ":\n"
                            for sub_opt in opt["sub_options"]:
                                options_text += f"  ‚Ü≥ {sub_opt}\n"
                        else:
                            options_text += "\n"
                    else:
                        options_text += "\n"
                else:
                    options_text += f"‚Ä¢ {opt}\n"
            
            if not options_text:
                options_text = "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ (—Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç)"
            
            await update.message.reply_text(
                f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:\n{options_text}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            logger.data_processing("–≤–æ–ø—Ä–æ—Å—ã", "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", details={"–≤–æ–ø—Ä–æ—Å": question})
            return EDITING_OPTIONS
            
        elif choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END

    async def handle_question_text_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        new_text = update.message.text.strip()
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞", details={"–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç": new_text})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'editing_question' not in context.user_data:
            logger.error("editing_question_missing", "–í–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                       user_id=user_id, details={"handler": "handle_question_text_edit"})
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        old_question = context.user_data['editing_question']
        question_num = context.user_data.get('editing_question_num', -1)
        
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ
        if question_num == -1:
            try:
                question_num = self.questions.index(old_question)
                context.user_data['editing_question_num'] = question_num
            except ValueError:
                logger.error("question_not_found", "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ", 
                          user_id=user_id, details={"–≤–æ–ø—Ä–æ—Å": old_question})
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
                
        logger.data_processing("–≤–æ–ø—Ä–æ—Å—ã", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞", 
                          details={"—Å—Ç–∞—Ä—ã–π_—Ç–µ–∫—Å—Ç": old_question, "–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç": new_text, "user_id": user_id})
                
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        success = self.sheets.edit_question_text(question_num, new_text)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            old_options = self.questions_with_options[old_question]
            self.questions_with_options = self.sheets.get_questions_with_options()
            self.questions = list(self.questions_with_options.keys())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
            if new_text in self.questions:
                logger.admin_action(user_id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞", 
                               details={"—Å—Ç–∞—Ç—É—Å": "—É—Å–ø–µ—à–Ω–æ", "—Å—Ç–∞—Ä—ã–π": old_question, "–Ω–æ–≤—ã–π": new_text})
                await update.message.reply_text(
                    f"‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:\n"
                    f"–ë—ã–ª–æ: {old_question}\n"
                    f"–°—Ç–∞–ª–æ: {new_text}",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                logger.admin_action(user_id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞", 
                               details={"—Å—Ç–∞—Ç—É—Å": "—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "—Å—Ç–∞—Ä—ã–π": old_question, "–Ω–æ–≤—ã–π": new_text})
                await update.message.reply_text(
                    "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.",
                    reply_markup=ReplyKeyboardRemove()
                )
        else:
            logger.error("question_update_failed", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", 
                      user_id=user_id, details={"–≤–æ–ø—Ä–æ—Å": old_question, "–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç": new_text})
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
                reply_markup=ReplyKeyboardRemove()
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.pop('editing_question', None)
        context.user_data.pop('editing_question_num', None)
        
        await self._update_handlers_questions(update)
        
        return ConversationHandler.END

    async def handle_options_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        choice = update.message.text
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤", details={"–¥–µ–π—Å—Ç–≤–∏–µ": choice})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'editing_question' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        question = context.user_data['editing_question']
        question_num = context.user_data.get('editing_question_num', -1)
        
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ
        if question_num == -1:
            try:
                question_num = self.questions.index(question)
                context.user_data['editing_question_num'] = question_num
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        current_options = self.questions_with_options[question]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã
        if 'editing_option_index' in context.user_data:
            return await self.handle_sub_options_edit(update, context)
        
        if choice == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['adding_option'] = True
            return EDITING_OPTIONS
            
        elif choice == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            if not current_options:
                await update.message.reply_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            keyboard = []
            for opt in current_options:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
                if isinstance(opt, dict) and "text" in opt:
                    keyboard.append([KeyboardButton(opt["text"])])
                else:
                    keyboard.append([KeyboardButton(str(opt))])
            keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
                reply_markup=reply_markup
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['selecting_parent_option'] = True
            return EDITING_SUB_OPTIONS
        
        elif choice == "‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç":
            if not current_options:
                await update.message.reply_text(
                    "‚ùå –£ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = []
            for opt in current_options:
                if isinstance(opt, dict) and "text" in opt:
                    keyboard.append([KeyboardButton(opt["text"])])
                else:
                    keyboard.append([KeyboardButton(str(opt))])
            keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['removing_option'] = True
            return EDITING_OPTIONS
        
        elif choice == "‚ú® –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º":
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            self.questions_with_options = self.sheets.get_questions_with_options()
            self.questions = list(self.questions_with_options.keys())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
            if question not in self.questions_with_options:
                logger.warning("question_not_found", "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤", 
                            details={"–≤–æ–ø—Ä–æ—Å": question, "user_id": update.effective_user.id})
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            success = self.sheets.edit_question_options(question_num, [])
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                await update.message.reply_text(
                    "‚úÖ –í–æ–ø—Ä–æ—Å —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–Ω—ã–π (–±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤)",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",
                    reply_markup=ReplyKeyboardRemove()
                )
            return ConversationHandler.END
        
        elif choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        elif 'adding_option' in context.user_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            new_option = {"text": choice}
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            self.questions_with_options = self.sheets.get_questions_with_options()
            self.questions = list(self.questions_with_options.keys())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if question in self.questions_with_options:
                current_options = self.questions_with_options[question]
            else:
                logger.warning("question_not_found", "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ", 
                            details={"–≤–æ–ø—Ä–æ—Å": question, "user_id": update.effective_user.id})
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('adding_option', None)
                return ConversationHandler.END
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            new_options = current_options + [new_option]
            
            logger.admin_action(update.effective_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞", 
                             details={"–≤–∞—Ä–∏–∞–Ω—Ç": choice, "—Ç–µ–∫—É—â–∏–µ_–≤–∞—Ä–∏–∞–Ω—Ç—ã": str(current_options)})
            
            success = self.sheets.edit_question_options(question_num, new_options)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                await update.message.reply_text(
                    f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω: {choice}",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                await self._update_handlers_questions(update)
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                context.user_data.pop('adding_option', None)
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
                    reply_markup=ReplyKeyboardRemove()
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('adding_option', None)
            return ConversationHandler.END
        
        elif 'removing_option' in context.user_data:
            if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
                await update.message.reply_text(
                    "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('removing_option', None)
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            self.questions_with_options = self.sheets.get_questions_with_options()
            self.questions = list(self.questions_with_options.keys())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if question in self.questions_with_options:
                current_options = self.questions_with_options[question]
            else:
                logger.warning("question_not_found", "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ", 
                            details={"–≤–æ–ø—Ä–æ—Å": question, "user_id": update.effective_user.id})
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('removing_option', None)
                return ConversationHandler.END
            
            # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            option_to_remove = None
            new_options = []
            
            for opt in current_options:
                if isinstance(opt, dict) and "text" in opt and opt["text"] == choice:
                    option_to_remove = opt
                else:
                    new_options.append(opt)
            
            if option_to_remove:
                success = self.sheets.edit_question_options(question_num, new_options)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                    self.questions_with_options = self.sheets.get_questions_with_options()
                    self.questions = list(self.questions_with_options.keys())
                    
                    # –ï—Å–ª–∏ —É –≤–∞—Ä–∏–∞–Ω—Ç–∞ –±—ã–ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
                    sub_options_message = ""
                    if option_to_remove.get("sub_options"):
                        sub_options_message = f"\n–í–º–µ—Å—Ç–µ —Å –Ω–∏–º —É–¥–∞–ª–µ–Ω—ã {len(option_to_remove['sub_options'])} –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
                    
                    await update.message.reply_text(
                        f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —É–¥–∞–ª–µ–Ω: {choice}{sub_options_message}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                    await self._update_handlers_questions(update)
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
                        reply_markup=ReplyKeyboardRemove()
                    )
            else:
                await update.message.reply_text(
                    f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç '{choice}' –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=ReplyKeyboardRemove()
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('removing_option', None)
            return ConversationHandler.END
        
        else:
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
            keyboard = [
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç")],
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")],
                [KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç")],
                [KeyboardButton("‚ú® –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º")],
                [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            options_text = ""
            for opt in current_options:
                if isinstance(opt, dict) and "text" in opt:
                    options_text += f"‚Ä¢ {opt['text']}"
                    if "sub_options" in opt:
                        if opt["sub_options"] == []:
                            options_text += " üìù (—Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ–¥–æ—Ç–≤–µ—Ç)\n"
                        elif opt.get("sub_options"):
                            options_text += ":\n"
                            for sub_opt in opt["sub_options"]:
                                options_text += f"  ‚Ü≥ {sub_opt}\n"
                        else:
                            options_text += "\n"
                    else:
                        options_text += "\n"
                else:
                    options_text += f"‚Ä¢ {opt}\n"
            
            if not options_text:
                options_text = "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ (—Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç)"
            
            await update.message.reply_text(
                f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:\n{options_text}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            return EDITING_OPTIONS
    
    async def handle_sub_options_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        choice = update.message.text
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", details={"–≤—ã–±–æ—Ä": choice})
        
        if 'editing_question' not in context.user_data or 'editing_option' not in context.user_data:
            logger.error("editing_context_missing", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", 
                       user_id=user_id, details={"context_keys": str(context.user_data.keys())})
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        question = context.user_data['editing_question']
        parent_option_text = context.user_data['editing_option']
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        question_num = context.user_data.get('editing_question_num', -1)
        logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", 
                          details={"–≤–æ–ø—Ä–æ—Å": question, "–≤–∞—Ä–∏–∞–Ω—Ç": parent_option_text, 
                                 "–∏–Ω–¥–µ–∫—Å_–≤–æ–ø—Ä–æ—Å–∞": question_num, "user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
        self.questions_with_options = self.sheets.get_questions_with_options()
        self.questions = list(self.questions_with_options.keys())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if question not in self.questions_with_options:
            logger.warning("question_not_found", "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤", 
                        details={"–≤–æ–ø—Ä–æ—Å": question, "user_id": update.effective_user.id})
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        current_options = self.questions_with_options[question]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        if choice == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç" or choice == "‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã" or choice == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç":
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è '{parent_option_text}':",
                reply_markup=ReplyKeyboardRemove()
            )
            context.user_data['adding_sub_option'] = True
            return ADDING_SUB_OPTION
        
        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        elif choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            await update.message.reply_text(
                "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('editing_option', None)
            return ConversationHandler.END
        
        # –û—á–∏—Å—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º)
        elif choice == "‚ú® –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º":
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
            parent_option_index = context.user_data['editing_option_index']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if parent_option_index < 0 or parent_option_index >= len(current_options):
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ {parent_option_index}",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('editing_option', None)
                context.user_data.pop('editing_option_index', None)
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
            parent_option = current_options[parent_option_index]
            parent_option_text = parent_option["text"]
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            parent_option["sub_options"] = []
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            success = self.sheets.edit_question_options(question_num, current_options)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                await update.message.reply_text(
                    f"‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{parent_option_text}' —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç.",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                await self._update_handlers_questions(update)
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('editing_option', None)
                context.user_data.pop('editing_option_index', None)
                context.user_data.pop('adding_sub_option', None)
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",
                    reply_markup=ReplyKeyboardRemove()
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('editing_option', None)
            context.user_data.pop('editing_option_index', None)
            return ConversationHandler.END
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        elif choice == "üìù –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞":
            parent_option_index = context.user_data.get('editing_option_index', -1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É
            if parent_option_index < 0 or parent_option_index >= len(current_options):
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É
                parent_found = False
                for i, opt in enumerate(current_options):
                    if isinstance(opt, dict) and "text" in opt and opt["text"] == parent_option_text:
                        parent_option_index = i
                        context.user_data['editing_option_index'] = i
                        parent_found = True
                        break
                        
                if not parent_found:
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            parent_option = current_options[parent_option_index]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
            if not isinstance(parent_option.get("sub_options"), list) or parent_option.get("sub_options") != []:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            current_prompt = parent_option.get("free_text_prompt", "")
            
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ '{parent_option_text}':\n\n"
                f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {current_prompt if current_prompt else '–ù–µ –∑–∞–¥–∞–Ω'}",
                reply_markup=ReplyKeyboardRemove()
            )
            return ADDING_FREE_TEXT_PROMPT
        
        # –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        elif choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('editing_option', None)
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        if 'editing_option' in context.user_data:
            parent_option_text = context.user_data['editing_option']
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            parent_option = None
            parent_index = -1
            for i, opt in enumerate(current_options):
                if isinstance(opt, dict) and "text" in opt and opt["text"] == parent_option_text:
                    parent_option = opt
                    parent_index = i
                    break
            
            if parent_option is None:
                await update.message.reply_text(
                    f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('editing_option', None)
                return ConversationHandler.END
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            if choice == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç" or choice == "‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã" or choice == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç":
                await update.message.reply_text(
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è '{parent_option_text}':",
                    reply_markup=ReplyKeyboardRemove()
                )
                context.user_data['adding_sub_option'] = True
                return ADDING_SUB_OPTION
            
            # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            elif choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
                await update.message.reply_text(
                    "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('editing_option', None)
                return ConversationHandler.END
            
            # –û—á–∏—Å—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º)
            elif choice == "‚ú® –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º":
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
                parent_option_index = context.user_data['editing_option_index']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                if parent_option_index < 0 or parent_option_index >= len(current_options):
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ {parent_option_index}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    context.user_data.pop('editing_option', None)
                    context.user_data.pop('editing_option_index', None)
                    return ConversationHandler.END
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
                parent_option = current_options[parent_option_index]
                parent_option_text = parent_option["text"]
                
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                parent_option["sub_options"] = []
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                success = self.sheets.edit_question_options(question_num, current_options)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                    self.questions_with_options = self.sheets.get_questions_with_options()
                    self.questions = list(self.questions_with_options.keys())
                    
                    await update.message.reply_text(
                        f"‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{parent_option_text}' —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                    await self._update_handlers_questions(update)
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    context.user_data.pop('editing_option', None)
                    context.user_data.pop('editing_option_index', None)
                    context.user_data.pop('adding_sub_option', None)
                    return ConversationHandler.END
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",
                        reply_markup=ReplyKeyboardRemove()
                    )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('editing_option', None)
                context.user_data.pop('editing_option_index', None)
                return ConversationHandler.END
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            elif choice == "‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç":
                sub_options = parent_option.get("sub_options", [])
                
                if not sub_options:
                    await update.message.reply_text(
                        f"‚ùå –£ –≤–∞—Ä–∏–∞–Ω—Ç–∞ '{parent_option_text}' –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return ConversationHandler.END
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                keyboard = [[KeyboardButton(sub_opt)] for sub_opt in sub_options]
                keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ '{parent_option_text}':",
                    reply_markup=reply_markup
                )
                context.user_data['removing_sub_option'] = True
                return REMOVING_SUB_OPTION
            
            # –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            elif choice == "‚ùå –û—Ç–º–µ–Ω–∞" or choice == "‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å":
                await update.message.reply_text(
                    "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('editing_option', None)
                return ConversationHandler.END
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                await update.message.reply_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
        
        return ConversationHandler.END
    
    async def handle_add_sub_option(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
        new_sub_option = update.message.text
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞", details={"–≤–∞—Ä–∏–∞–Ω—Ç": new_sub_option})
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
        if new_sub_option == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            await update.message.reply_text(
                "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('editing_option', None)
            context.user_data.pop('editing_option_index', None)
            context.user_data.pop('adding_sub_option', None)
            return ConversationHandler.END
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º"
        if new_sub_option == "‚ú® –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º":
            if 'editing_option_index' not in context.user_data:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
                
            parent_option_text = context.user_data['editing_option']
            parent_option_index = context.user_data['editing_option_index']
            question = context.user_data['editing_question']
            question_num = context.user_data.get('editing_question_num', -1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            self.questions_with_options = self.sheets.get_questions_with_options()
            self.questions = list(self.questions_with_options.keys())
            
            if question not in self.questions_with_options:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å '{question}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('editing_option', None)
                context.user_data.pop('editing_option_index', None)
                context.user_data.pop('adding_sub_option', None)
                return ConversationHandler.END
                
            current_options = self.questions_with_options[question]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            if parent_option_index < 0 or parent_option_index >= len(current_options):
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É
                parent_found = False
                for i, opt in enumerate(current_options):
                    if isinstance(opt, dict) and "text" in opt and opt["text"] == parent_option_text:
                        parent_option_index = i
                        context.user_data['editing_option_index'] = i
                        parent_found = True
                        break
                        
                if not parent_found:
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    context.user_data.pop('editing_option', None)
                    context.user_data.pop('editing_option_index', None)
                    context.user_data.pop('adding_sub_option', None)
                    return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
            parent_option = current_options[parent_option_index]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–µ–º text
            if not isinstance(parent_option, dict) or "text" not in parent_option:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop('editing_option', None)
                context.user_data.pop('editing_option_index', None)
                context.user_data.pop('adding_sub_option', None)
                return ConversationHandler.END
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            if "sub_options" not in parent_option:
                parent_option["sub_options"] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –µ—â–µ –Ω–µ—Ç
            if new_sub_option in parent_option["sub_options"]:
                await update.message.reply_text(
                    f"‚ùå –í–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç '{new_sub_option}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                return await self.handle_sub_options_edit(update, context)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç
            parent_option["sub_options"].append(new_sub_option)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            success = self.sheets.edit_question_options(question_num, current_options)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                keyboard = [
                    [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")],
                    [KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                current_options = self.questions_with_options[question]
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤—Å–µ –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω
                if parent_option_index < len(current_options):
                    parent_option = current_options[parent_option_index]
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
                    sub_options_text = ""
                    if parent_option.get("sub_options"):
                        for i, sub_opt in enumerate(parent_option["sub_options"]):
                            sub_options_text += f"{i+1}. {sub_opt}\n"
                    else:
                        sub_options_text = "–ù–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
                
                    await update.message.reply_text(
                        f"‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {new_sub_option}\n\n"
                        f"–¢–µ–∫—É—â–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{parent_option['text']}':\n"
                        f"{sub_options_text}\n"
                        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç?",
                        reply_markup=reply_markup
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                    await self._update_handlers_questions(update)
                else:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    context.user_data.pop('adding_sub_option', None)
                    return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç",
                    reply_markup=ReplyKeyboardRemove()
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('adding_sub_option', None)
            return ConversationHandler.END
    
    async def handle_remove_sub_option(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
        choice = update.message.text
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–í—ã–±–æ—Ä –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", details={"–≤–∞—Ä–∏–∞–Ω—Ç": choice})
        
        if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('removing_sub_option', None)
            return ConversationHandler.END
        
        if 'editing_option_index' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        parent_option_index = context.user_data['editing_option_index']
        question = context.user_data['editing_question']
        question_num = context.user_data.get('editing_question_num', -1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        self.questions_with_options = self.sheets.get_questions_with_options()
        self.questions = list(self.questions_with_options.keys())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if question not in self.questions_with_options:
            logger.warning("question_not_found", "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤", 
                         details={"–≤–æ–ø—Ä–æ—Å": question, "user_id": update.effective_user.id,
                                 "–¥–µ–π—Å—Ç–≤–∏–µ": "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"})
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å '{question}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=ReplyKeyboardRemove()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('editing_option', None)
            context.user_data.pop('editing_option_index', None)
            context.user_data.pop('removing_sub_option', None)
            return ConversationHandler.END
            
        current_options = self.questions_with_options[question]
        
        logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤", details={"user_id": user_id})
        
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if parent_option_index < 0 or parent_option_index >= len(current_options):
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ {parent_option_index}",
                reply_markup=ReplyKeyboardRemove()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('editing_option', None)
            context.user_data.pop('editing_option_index', None)
            context.user_data.pop('removing_sub_option', None)
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
        parent_option = current_options[parent_option_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–µ–º text –∏ sub_options
        if not isinstance(parent_option, dict) or "text" not in parent_option or "sub_options" not in parent_option:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞",
                reply_markup=ReplyKeyboardRemove()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('editing_option', None)
            context.user_data.pop('editing_option_index', None)
            context.user_data.pop('removing_sub_option', None)
            return ConversationHandler.END
        
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if choice in parent_option["sub_options"]:
            parent_option["sub_options"].remove(choice)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            success = self.sheets.edit_question_options(question_num, current_options)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                context.user_data.pop('removing_sub_option', None)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç '{choice}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                await self._update_handlers_questions(update)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç.",
                    reply_markup=ReplyKeyboardRemove()
                )
        else:
            await update.message.reply_text(
                f"‚ùå –í–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç '{choice}' –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=ReplyKeyboardRemove()
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('removing_sub_option', None)
        return ConversationHandler.END

    async def handle_add_free_text_prompt(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        prompt = update.message.text
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", details={"—Ç–µ–∫—Å—Ç_–≤–æ–ø—Ä–æ—Å–∞": prompt})
        
        if 'editing_question' not in context.user_data or 'editing_option' not in context.user_data:
            logger.error("editing_context_missing", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", 
                       user_id=user_id, details={"handler": "handle_add_free_text_prompt"})
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        question = context.user_data['editing_question']
        parent_option_text = context.user_data['editing_option']
        parent_option_index = context.user_data.get('editing_option_index', -1)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        question_num = context.user_data.get('editing_question_num', -1)
        logger.data_processing("–≤–æ–ø—Ä–æ—Å—ã", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", details={"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
        self.questions_with_options = self.sheets.get_questions_with_options()
        self.questions = list(self.questions_with_options.keys())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if question not in self.questions_with_options:
            logger.warning("question_not_found", "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤", details={"–≤–æ–ø—Ä–æ—Å": question, "user_id": update.effective_user.id})
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        current_options = self.questions_with_options[question]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ
        parent_found = False
        for i, opt in enumerate(current_options):
            if isinstance(opt, dict) and "text" in opt and opt["text"] == parent_option_text:
                parent_option_index = i
                context.user_data['editing_option_index']
                parent_found = True
                break
                
        if not parent_found:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        parent_option = current_options[parent_option_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        if not isinstance(parent_option.get("sub_options"), list) or parent_option.get("sub_options") != []:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ free_text_prompt –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
        parent_option["free_text_prompt"] = prompt
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        success = self.sheets.edit_question_options(question_num, current_options)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            self.questions_with_options = self.sheets.get_questions_with_options()
            self.questions = list(self.questions_with_options.keys())
            
            await update.message.reply_text(
                f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω: '{prompt}'",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
            await self._update_handlers_questions(update)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞",
                reply_markup=ReplyKeyboardRemove()
            )
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('editing_option', None)
        context.user_data.pop('editing_option_index', None)
        return ConversationHandler.END

    async def delete_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", "–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
        if not self.questions:
            await update.message.reply_text(
                "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        keyboard = []
        for i, question in enumerate(self.questions):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            short_question = question[:30] + "..." if len(question) > 30 else question
            keyboard.append([KeyboardButton(f"{i+1}. {short_question}")])
        
        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        return DELETING_QUESTION

    async def handle_question_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
        choice = update.message.text
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", "–í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞", details={"–≤—ã–±–æ—Ä": choice})
        
        if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "5. —Ç–µ—Å—Ç"
            import re
            match = re.match(r'^(\d+)\.', choice)
            if match:
                question_num = int(match.group(1)) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ (–Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 0)
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Å—ë –∫–∞–∫ —á–∏—Å–ª–æ
                question_num = int(choice) - 1
                
            logger.data_processing("–≤–æ–ø—Ä–æ—Å—ã", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", details={"user_id": user_id})
            
            if 0 <= question_num < len(self.questions):
                question_to_delete = self.questions[question_num]
                
                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
                old_questions = self.questions.copy()
                logger.data_processing("–≤–æ–ø—Ä–æ—Å—ã", "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", details={"–Ω–∞—á–∞–ª–æ": True, "–≤–æ–ø—Ä–æ—Å": question_to_delete})
                
                # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
                success = self.sheets.delete_question(question_num)
                
                if success:
                    # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                    self.questions_with_options = self.sheets.get_questions_with_options()
                    self.questions = list(self.questions_with_options.keys())
                    logger.data_processing("–≤–æ–ø—Ä–æ—Å—ã", "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", details={"—É—Å–ø–µ—Ö": True, "–≤–æ–ø—Ä–æ—Å": question_to_delete})
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —á–µ—Ä–µ–∑ AdminHandler
                    await self._update_handlers_questions(update)
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ application
                    if self.application:
                        # –û–±—Ö–æ–¥–∏–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                        for group_idx, group in enumerate(self.application.handlers):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ group —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º
                            if not isinstance(group, (list, tuple)) or isinstance(group, (str, bytes, int)):
                                logger.warning("invalid_handler_group", "–ì—Ä—É–ø–ø–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º", 
                                          details={"–∏–Ω–¥–µ–∫—Å": group_idx, "—Ç–∏–ø": str(type(group))})
                                continue
                            
                            for handler in group:
                                if isinstance(handler, ConversationHandler) and hasattr(handler, 'name'):
                                    logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫", 
                                                       details={"–∏–º—è_–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞": handler.name,
                                                              "user_id": update.effective_user.id})
                                    if hasattr(handler, 'entry_points'):
                                        for entry_point in handler.entry_points:
                                            if hasattr(entry_point.callback, '__self__'):
                                                handler_instance = entry_point.callback.__self__
                                                if hasattr(handler_instance, 'questions') and hasattr(handler_instance, 'questions_with_options'):
                                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                                                    old_len = len(handler_instance.questions) if hasattr(handler_instance, 'questions') else 0
                                                    handler_instance.questions_with_options = self.sheets.get_questions_with_options()
                                                    handler_instance.questions = list(handler_instance.questions_with_options.keys())
                                                    new_len = len(handler_instance.questions)
                                                    
                                                    logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                                                                      details={"–æ–±—Ä–∞–±–æ—Ç—á–∏–∫": handler_instance.__class__.__name__,
                                                                             "–≥—Ä—É–ø–ø–∞": group_idx,
                                                                             "–≤–æ–ø—Ä–æ—Å–æ–≤_–±—ã–ª–æ": old_len,
                                                                             "–≤–æ–ø—Ä–æ—Å–æ–≤_—Å—Ç–∞–ª–æ": new_len,
                                                                             "user_id": update.effective_user.id})
                    
                    await update.message.reply_text(
                        f"‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:\n{question_to_delete}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –≤–æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                    logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", 
                                        details={"–æ–ø–µ—Ä–∞—Ü–∏—è": "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", 
                                               "–≤–æ–ø—Ä–æ—Å": question_to_delete,
                                               "user_id": update.effective_user.id})
                    for group_idx, group in enumerate(self.application.handlers):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ group —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º
                        if not isinstance(group, (list, tuple)) or isinstance(group, (str, bytes, int)):
                            continue
                            
                        for handler in group:
                            if isinstance(handler, CommandHandler) and hasattr(handler.callback, '__name__') and handler.callback.__name__ == "list_questions":
                                list_questions_handler = handler.callback.__self__
                                if hasattr(list_questions_handler, 'questions'):
                                    logger.data_processing("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–°–æ—Å—Ç–æ—è–Ω–∏–µ list_questions", 
                                                       details={"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–æ–ø—Ä–æ—Å–æ–≤": len(list_questions_handler.questions),
                                                              "–æ–±—Ä–∞–±–æ—Ç—á–∏–∫": "list_questions_handler", 
                                                              "user_id": update.effective_user.id})
                    
                    logger.admin_action(update.effective_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", 
                                     details={"–≤–æ–ø—Ä–æ—Å": question_to_delete, 
                                            "–æ—Å—Ç–∞–ª–æ—Å—å_–≤–æ–ø—Ä–æ—Å–æ–≤": len(self.questions)})
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    logger.error("question_delete_failed", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", 
                                details={"–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞": question_num, "user_id": update.effective_user.id})
                
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                    reply_markup=ReplyKeyboardRemove()
                )
                logger.error("invalid_question_number", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞", 
                            details={"–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞": question_num, "user_id": update.effective_user.id})
                return ConversationHandler.END
        except ValueError as e:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.error("value_conversion_error", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –≤ —á–∏—Å–ª–æ", 
                        details={"—Ç–µ–∫—Å—Ç": choice, "–æ—à–∏–±–∫–∞": str(e), "user_id": update.effective_user.id})
            return ConversationHandler.END

    async def _update_handlers_questions(self, update: Update):
        """–í—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —á–µ—Ä–µ–∑ AdminHandler"""
        try:
            if not self.application:
                logger.error("application_missing", "Application –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", 
                            details={"–ø—Ä–∏—á–∏–Ω–∞": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"})
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–∏ —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            old_questions_count = len(self.questions)
            logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤", 
                                details={"—Ç–µ–∫—É—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": old_questions_count,
                                       "user_id": update.effective_user.id if update else "system"})
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            self.questions_with_options = self.sheets.get_questions_with_options()
            self.questions = list(self.questions_with_options.keys())
            logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                                details={"–º–æ–¥—É–ª—å": "EditHandler", 
                                       "–≤–æ–ø—Ä–æ—Å–æ–≤_–±—ã–ª–æ": old_questions_count, 
                                       "–≤–æ–ø—Ä–æ—Å–æ–≤_—Å—Ç–∞–ª–æ": len(self.questions),
                                       "user_id": update.effective_user.id if update else "system"})
            
            # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è list_questions
            list_questions_handler_updated = False
            admin_handler = None
            
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ application
            for group in self.application.handlers.values():
                if not isinstance(group, list):
                    continue
                
                for handler in group:
                    # –ò—â–µ–º AdminHandler
                    if hasattr(handler, 'callback') and hasattr(handler.callback, '__self__'):
                        handler_instance = handler.callback.__self__
                        if handler_instance.__class__.__name__ == "AdminHandler":
                            admin_handler = handler_instance
                            logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–ù–∞–π–¥–µ–Ω AdminHandler", 
                                               details={"–æ–±—Ä–∞–±–æ—Ç—á–∏–∫": str(handler),
                                                      "user_id": update.effective_user.id if update else "system"})
                            break
                    
                    # –ò—â–µ–º ConversationHandler —Å –∏–º–µ–Ω–µ–º add_question_conversation
                    if isinstance(handler, ConversationHandler) and hasattr(handler, 'name') and handler.name == "add_question_conversation":
                        for entry_point in handler.entry_points:
                            if hasattr(entry_point.callback, '__self__'):
                                handler_instance = entry_point.callback.__self__
                                if handler_instance.__class__.__name__ == "AdminHandler":
                                    admin_handler = handler_instance
                                    logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–ù–∞–π–¥–µ–Ω AdminHandler", 
                                                       details={"—á–µ—Ä–µ–∑": "ConversationHandler",
                                                              "user_id": update.effective_user.id if update else "system"})
                                    break
                    
                    # –ò—â–µ–º CommandHandler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã list_questions
                    if isinstance(handler, CommandHandler) and hasattr(handler.callback, '__name__') and handler.callback.__name__ == "list_questions":
                        list_questions_handler = handler.callback.__self__
                        if hasattr(list_questions_handler, 'questions'):
                            old_len = len(list_questions_handler.questions)
                            list_questions_handler.questions_with_options = self.sheets.get_questions_with_options()
                            list_questions_handler.questions = list(list_questions_handler.questions_with_options.keys())
                            
                            list_questions_handler_updated = True
                
                if admin_handler:
                    break
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —á–µ—Ä–µ–∑ AdminHandler
            if admin_handler and hasattr(admin_handler, '_update_handlers_questions'):
                logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ AdminHandler", 
                                    details={"–º–µ—Ç–æ–¥": "_update_handlers_questions",
                                           "user_id": update.effective_user.id if update else "system"})
                await admin_handler._update_handlers_questions(update)
                logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ AdminHandler",
                                    details={"—Å—Ç–∞—Ç—É—Å": "—É—Å–ø–µ—à–Ω–æ",
                                           "user_id": update.effective_user.id if update else "system"})
                return
                
            # –ï—Å–ª–∏ AdminHandler –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            logger.warning("admin_handler_missing", "AdminHandler –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                         details={"–¥–µ–π—Å—Ç–≤–∏–µ": "–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
                                 "–ø—Ä–∏—á–∏–Ω–∞": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
            updated_handlers = 0
            for group in self.application.handlers.values():
                if not isinstance(group, list):
                    continue
                    
                for handler in group:
                    handler_updated = False
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º CommandHandler –¥–ª—è list_questions, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω
                    if not list_questions_handler_updated and isinstance(handler, CommandHandler) and hasattr(handler.callback, '__name__') and handler.callback.__name__ == "list_questions":
                        list_questions_handler = handler.callback.__self__
                        if hasattr(list_questions_handler, 'questions'):
                            old_len = len(list_questions_handler.questions)
                            list_questions_handler.questions_with_options = self.sheets.get_questions_with_options()
                            list_questions_handler.questions = list(list_questions_handler.questions_with_options.keys())
                            logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ list_questions", 
                                                details={"–≤–æ–ø—Ä–æ—Å–æ–≤_–±—ã–ª–æ": old_len, 
                                                       "–≤–æ–ø—Ä–æ—Å–æ–≤_—Å—Ç–∞–ª–æ": len(list_questions_handler.questions),
                                                       "user_id": update.effective_user.id if update else "system"})
                            list_questions_handler_updated = True
                            handler_updated = True
                            updated_handlers += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ questions –∏ questions_with_options
                    if isinstance(handler, ConversationHandler) and hasattr(handler, 'entry_points'):
                        for entry_point in handler.entry_points:
                            if hasattr(entry_point.callback, '__self__'):
                                handler_instance = entry_point.callback.__self__
                                if hasattr(handler_instance, 'questions') and hasattr(handler_instance, 'questions_with_options'):
                                    old_len = len(handler_instance.questions) if hasattr(handler_instance, 'questions') else 0
                                    handler_instance.questions_with_options = self.sheets.get_questions_with_options()
                                    handler_instance.questions = list(handler_instance.questions_with_options.keys())
                                    new_len = len(handler_instance.questions)
                                    
                                    handler_updated = True
                                    updated_handlers += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
                    if hasattr(handler, 'callback') and hasattr(handler.callback, '__self__'):
                        handler_instance = handler.callback.__self__
                        if hasattr(handler_instance, 'questions') and hasattr(handler_instance, 'questions_with_options'):
                            old_len = len(handler_instance.questions) if hasattr(handler_instance, 'questions') else 0
                            handler_instance.questions_with_options = self.sheets.get_questions_with_options()
                            handler_instance.questions = list(handler_instance.questions_with_options.keys())
                            new_len = len(handler_instance.questions)
                            if not handler_updated:  # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                                logger.data_processing("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤", 
                                                    details={"–æ–±—Ä–∞–±–æ—Ç—á–∏–∫": handler_instance.__class__.__name__,
                                                           "–≤–æ–ø—Ä–æ—Å–æ–≤_–±—ã–ª–æ": old_len,
                                                           "–≤–æ–ø—Ä–æ—Å–æ–≤_—Å—Ç–∞–ª–æ": new_len,
                                                           "user_id": update.effective_user.id if update else "system"})
                                updated_handlers += 1
            
            if updated_handlers > 0:
                logger.admin_action(update.effective_user.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", 
                                  details={"—É—Å–ø–µ—à–Ω–æ_–æ–±–Ω–æ–≤–ª–µ–Ω–æ": updated_handlers})
            else:
                logger.warning("handlers_update_empty", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                             details={"–ø—Ä–∏—á–∏–Ω–∞": "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"})
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ list_questions
            if not list_questions_handler_updated:
                logger.warning("list_questions_not_updated", "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã list_questions –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω", 
                             details={"–ø—Ä–∏—á–∏–Ω–∞": "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"})
                
            logger.admin_action(update.effective_user.id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", 
                              details={"—É—Å–ø–µ—à–Ω–æ": True, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": updated_handlers})
        except Exception as e:
            logger.error("questions_update_error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤", 
                        details={"–æ—à–∏–±–∫–∞": str(e), "user_id": update.effective_user.id if update else "unknown"})
            logger.exception(e)