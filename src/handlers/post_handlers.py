"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤
"""

import os
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import telegram
import telegram.error  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram
from io import BytesIO
from telegram.constants import ParseMode, ChatAction

from models.states import *
from utils.sheets import GoogleSheets
from handlers.base_handler import BaseHandler
from config import MAX_IMAGE_SIZE
from utils.logger import get_logger

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = get_logger()

class PostHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self, sheets: GoogleSheets, application=None):
        super().__init__(sheets)
        self.application = application
    
    async def create_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–µ
        if not context.user_data.get('post'):
            context.user_data['post'] = {
                'title': '',
                'text': '',
                'image_file_id': None,
                'button_text': '',
                'button_url': ''
            }
        
        await update.message.reply_text(
            "üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ (–±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤):",
            reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        
        return CREATING_POST
    
    async def handle_post_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        context.user_data['post']['title'] = update.message.text
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        
        return ENTERING_POST_TEXT
    
    async def handle_post_content(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞"""
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        context.user_data['post']['text'] = update.message.text
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        keyboard = [
            ["üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"],
            ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        
        await update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –ø–æ—Å—Ç—É?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        
        return ADDING_POST_IMAGE
    
    async def handle_image_option(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        user_choice = update.message.text
        
        if user_choice == "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
            logger.admin_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–í—ã–±–æ—Ä –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è).\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_IMAGE_SIZE / (1024 * 1024):.1f} –ú–ë",
                reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
            )
            
            return ADDING_POST_IMAGE
            
        elif user_choice == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            logger.admin_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–Ω–æ–ø–∫–∏
            return await self.ask_add_button(update, context)
            
        elif user_choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel_post(update, context)
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup([
                ["üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"],
                ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], resize_keyboard=True)
        )
        
        return ADDING_POST_IMAGE
    
    async def handle_image_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if update.message.photo:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = update.message.photo[-1]
            file_id = photo.file_id
            logger.admin_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ", details={"file_id": file_id})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            context.user_data['post']['image_file_id'] = file_id
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–Ω–æ–ø–∫–∏
            return await self.ask_add_button(update, context)
            
        elif update.message.document:
            document = update.message.document
            mime_type = document.mime_type
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if mime_type and mime_type.startswith('image/'):
                file_id = document.file_id
                file_size = document.file_size
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if file_size and file_size > MAX_IMAGE_SIZE:
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ({file_size / (1024 * 1024):.1f} –ú–ë) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π "
                        f"({MAX_IMAGE_SIZE / (1024 * 1024):.1f} –ú–ë).\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
                        reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
                    )
                    return ADDING_POST_IMAGE
                
                logger.user_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", details={"file_id": file_id})
                logger.admin_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", details={"file_id": file_id})
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                context.user_data['post']['image_file_id'] = file_id
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–Ω–æ–ø–∫–∏
                return await self.ask_add_button(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                    reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
                )
                return ADDING_POST_IMAGE
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel_post(update, context)
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è).",
            reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        
        return ADDING_POST_IMAGE
    
    async def ask_add_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π"""
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–í–æ–ø—Ä–æ—Å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π")
        
        keyboard = [
            ["üîó –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π"],
            ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        
        await update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –∫ –ø–æ—Å—Ç—É?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        
        return ADDING_URL_BUTTON
    
    async def handle_button_option(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π"""
        user_id = update.effective_user.id
        user_choice = update.message.text
        
        if user_choice == "üîó –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π":
            logger.user_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π")
            
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ:",
                reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
            )
            
            return ENTERING_BUTTON_TEXT
            
        elif user_choice == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            logger.user_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ—Å—Ç–∞
            return await self.show_post_preview(update, context)
            
        elif user_choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel_post(update, context)
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup([
                ["üîó –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π"],
                ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], resize_keyboard=True)
        )
        
        return ADDING_URL_BUTTON
    
    async def handle_button_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
        user_id = update.effective_user.id
        button_text = update.message.text
        
        if button_text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel_post(update, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        context.user_data['post']['button_text'] = button_text
        logger.user_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏", details={"button_text": button_text})
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com):",
            reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        
        return ENTERING_BUTTON_URL
    
    async def handle_button_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
        user_id = update.effective_user.id
        button_url = update.message.text
        
        if button_url == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel_post(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://
        if not (button_url.startswith('http://') or button_url.startswith('https://')):
            button_url = 'https://' + button_url
            logger.admin_action(user_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL", f"–î–æ–±–∞–≤–ª–µ–Ω https:// –∫ URL: {button_url}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–Ω–æ–ø–∫–∏
        context.user_data['post']['button_url'] = button_url
        logger.user_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–í–≤–æ–¥ URL –∫–Ω–æ–ø–∫–∏", details={"button_url": button_url})
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ—Å—Ç–∞
        return await self.show_post_preview(update, context)
    
    async def show_post_preview(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞"""
        user_id = update.effective_user.id
        logger.admin_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        
        post = context.user_data.get('post', {})
        post_title = post.get('title', '')
        post_text = post.get('text', '')
        image_file_id = post.get('image_file_id')
        button_text = post.get('button_text', '')
        button_url = post.get('button_url', '')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"],
            ["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        preview_message = "üìù <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:</b>\n\n"
        if post_title:
            preview_message += f"<b>{post_title}</b>\n\n"
        preview_message += post_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if button_text and button_url:
            preview_message += f"\n\n<b>–ö–Ω–æ–ø–∫–∞:</b> {button_text} ‚Üí {button_url}"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–Ω–æ–ø–∫–∏
        inline_keyboard = None
        if button_text and button_url:
            inline_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(text=button_text, url=button_url)]
            ])
        
        try:
            if image_file_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                await update.message.reply_photo(
                    photo=image_file_id,
                    caption=preview_message,
                    parse_mode='HTML',
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∫–Ω–æ–ø–∫–∏
                if inline_keyboard:
                    await update.message.reply_text(
                        "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–æ–ø–∫–∏ (–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–µ–µ):",
                        reply_markup=inline_keyboard
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    preview_message,
                    parse_mode='HTML',
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∫–Ω–æ–ø–∫–∏
                if inline_keyboard:
                    await update.message.reply_text(
                        "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–æ–ø–∫–∏ (–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–µ–µ):",
                        reply_markup=inline_keyboard
                    )
        except Exception as e:
            logger.error("–æ—à–∏–±–∫–∞_–ø—Ä–∏_–æ—Ç–ø—Ä–∞–≤–∫–µ_–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", e)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=ReplyKeyboardMarkup([["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"], ["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
            )
        
        return CONFIRMING_POST
    
    async def handle_post_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
        user_id = update.effective_user.id
        user_choice = update.message.text
        
        if user_choice == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            logger.user_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞")
            
            post = context.user_data.get('post', {})
            post_text = post.get('text', '')
            image_file_id = post.get('image_file_id')
            button_text = post.get('button_text', '')
            button_url = post.get('button_url', '')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
            post_id = self.sheets.save_post(
                title=context.user_data['post'].get('title', '–ü–æ—Å—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                text=context.user_data['post'].get('text', ''),
                image_url=image_file_id,
                button_text=context.user_data['post'].get('button_text', ''),
                button_url=context.user_data['post'].get('button_url', ''),
                admin_id=user_id
            )
            
            if post_id:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                keyboard = [
                    ["üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"],
                    ["‚è≠Ô∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"],
                    ["‚ùå –û—Ç–º–µ–Ω–∞"]
                ]
                
                await update.message.reply_text(
                    "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                context.user_data['post_id'] = post_id
                
                return CONFIRMING_SEND_TO_ALL
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
                
        elif user_choice == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
            logger.user_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ
            context.user_data['post'] = {
                'title': '',
                'text': '',
                'image_file_id': None,
                'button_text': '',
                'button_url': ''
            }
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ
            await update.message.reply_text(
                "üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ (–±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤):",
                reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
            )
            
            return CREATING_POST
            
        elif user_choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel_post(update, context)
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup([
                ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"],
                ["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], resize_keyboard=True)
        )
        
        return CONFIRMING_POST
    
    async def update_progress_message(self, message, users_count, success_count, fail_count, is_final=False):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if is_final:
            text = (
                f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
            )
        else:
            text = (
                f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞...\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {success_count + fail_count}/{users_count}"
            )
        
        try:
            await message.edit_text(text)
        except telegram.error.BadRequest as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if "Message can't be edited" in str(e):
                try:
                    await message.reply_text(text)
                except Exception as e2:
                    logger.error("–Ω–µ_—É–¥–∞–ª–æ—Å—å_–æ—Ç–ø—Ä–∞–≤–∏—Ç—å_–Ω–æ–≤–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ_–æ_–ø—Ä–æ–≥—Ä–µ—Å—Å–µ", e2)
            else:
                logger.error("–æ—à–∏–±–∫–∞_–ø—Ä–∏_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏_—Å–æ–æ–±—â–µ–Ω–∏—è_–æ_–ø—Ä–æ–≥—Ä–µ—Å—Å–µ", e)
        except Exception as e:
            logger.error("–æ—à–∏–±–∫–∞_–ø—Ä–∏_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏_—Å–æ–æ–±—â–µ–Ω–∏—è_–æ_–ø—Ä–æ–≥—Ä–µ—Å—Å–µ", e)
    
    async def send_post_to_users(self, message, post, users_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        success_count = 0
        fail_count = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        inline_keyboard = None
        if post.get('button_text') and post.get('button_url'):
            inline_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    text=post['button_text'], 
                    url=post['button_url']
                )]
            ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ (–≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ)
        progress_message = None
        try:
            progress_message = await message.reply_text(
                f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞...\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: 0\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: 0\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{len(users_data)}"
            )
        except Exception as e:
            logger.error("–æ—à–∏–±–∫–∞_–ø—Ä–∏_—Å–æ–∑–¥–∞–Ω–∏–∏_—Å–æ–æ–±—â–µ–Ω–∏—è_–æ_–ø—Ä–æ–≥—Ä–µ—Å—Å–µ", e)
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ
            progress_message = message
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user in users_data:
            try:
                telegram_id = int(user[1])  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = user[0] if len(user) > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ ID
                if telegram_id <= 0:
                    logger.warning("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π_id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                                  details={"user_id": telegram_id, "username": username})
                    fail_count += 1
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                post_title = post.get('title', '')
                post_text = post.get('text', '')
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = post_text
                if post_title:
                    message_text = f"<b>{post_title}</b>\n\n{post_text}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
                try:
                    if post.get('image_url'):
                        await self.application.bot.send_photo(
                            chat_id=telegram_id,
                            photo=post['image_url'],
                            caption=message_text,
                            parse_mode='HTML',
                            reply_markup=inline_keyboard
                        )
                    else:
                        await self.application.bot.send_message(
                            chat_id=telegram_id,
                            text=message_text,
                            parse_mode='HTML',
                            reply_markup=inline_keyboard
                        )
                    
                    success_count += 1
                    logger.info("–æ—Ç–ø—Ä–∞–≤–∫–∞_–ø–æ—Å—Ç–∞_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", 
                               details={"user_id": telegram_id, "username": username, "—Å—Ç–∞—Ç—É—Å": "—É—Å–ø–µ—Ö"})
                
                except telegram.error.BadRequest as e:
                    if "Chat not found" in str(e):
                        logger.warning("—á–∞—Ç_–Ω–µ_–Ω–∞–π–¥–µ–Ω", 
                                      details={"user_id": telegram_id, "username": username, "–æ—à–∏–±–∫–∞": str(e)})
                    else:
                        logger.error("–æ—à–∏–±–∫–∞_–∑–∞–ø—Ä–æ—Å–∞_–ø—Ä–∏_–æ—Ç–ø—Ä–∞–≤–∫–µ", e, 
                                    details={"user_id": telegram_id, "username": username, "—Ç–∏–ø_–æ—à–∏–±–∫–∏": "BadRequest"})
                    fail_count += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è Telegram API
                except Exception as telegram_error:
                    error_type = type(telegram_error).__name__
                    logger.warning("–æ—à–∏–±–∫–∞_–æ—Ç–ø—Ä–∞–≤–∫–∏_—Å–æ–æ–±—â–µ–Ω–∏—è", 
                                  details={"user_id": telegram_id, "username": username, 
                                          "–æ—à–∏–±–∫–∞": str(telegram_error), "—Ç–∏–ø_–æ—à–∏–±–∫–∏": error_type})
                    fail_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if (success_count + fail_count) % 10 == 0 and progress_message:
                    await self.update_progress_message(
                        progress_message, 
                        len(users_data), 
                        success_count, 
                        fail_count
                    )
                
            except Exception as e:
                username = user[0] if len(user) > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                logger.error("–æ—à–∏–±–∫–∞_–ø—Ä–∏_–æ—Ç–ø—Ä–∞–≤–∫–µ_–ø–æ—Å—Ç–∞_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", e, 
                            details={"user_id": telegram_id if 'telegram_id' in locals() else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", 
                                    "username": username, 
                                    "error_type": type(e).__name__})
                fail_count += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        if progress_message:
            await self.update_progress_message(
                progress_message,
                len(users_data),
                success_count,
                fail_count,
                is_final=True
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ,
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.reply_text(
                    f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
                )
            except Exception as e:
                logger.error("–Ω–µ_—É–¥–∞–ª–æ—Å—å_–æ—Ç–ø—Ä–∞–≤–∏—Ç—å_—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ", e)
        
        return success_count, fail_count
    
    async def handle_send_to_all_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        user_id = update.effective_user.id
        user_choice = update.message.text
        
        if user_choice == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º":
            logger.user_action(user_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞", "–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            post_id = context.user_data.get('post_id')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
            post = self.sheets.get_post_by_id(post_id)
            
            if post:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_data = self.sheets.get_users_list(page=1, page_size=10000)[0]
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                message = await update.message.reply_text(
                    f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                await self.send_post_to_users(message, post, users_data)
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ
                if 'post' in context.user_data:
                    del context.user_data['post']
                if 'post_id' in context.user_data:
                    del context.user_data['post_id']
                
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
                
        elif user_choice == "‚è≠Ô∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å":
            logger.user_action(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "—Ä–µ—à–∏–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            await update.message.reply_text(
                "‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤.",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ
            if 'post' in context.user_data:
                del context.user_data['post']
            if 'post_id' in context.user_data:
                del context.user_data['post_id']
            
            return ConversationHandler.END
            
        elif user_choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel_post(update, context)
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup([
                ["üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"],
                ["‚è≠Ô∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], resize_keyboard=True)
        )
        
        return CONFIRMING_SEND_TO_ALL
    
    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        user_id = update.effective_user.id
        logger.user_action(user_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        posts = self.sheets.get_all_posts()
        
        if not posts:
            await update.message.reply_text(
                "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω
        admin_data = self.sheets.get_admins_info()
        admin_names = {}
        for admin in admin_data:
            if len(admin) >= 3:  # ID, –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ
                admin_names[admin[0]] = admin[1]  # ID -> –∏–º—è
        
        logger.data_processing("–∞–¥–º–∏–Ω—ã", "–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ª–æ–≤–∞—Ä—å –∏–º—ë–Ω –∞–¥–º–∏–Ω–æ–≤", details=admin_names)
        logger.data_processing("–∞–¥–º–∏–Ω—ã", "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–æ–≤", details={"–¥–∞–Ω–Ω—ã–µ": admin_data})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å—Ç–æ–≤
        posts_text = "üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:</b>\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å—Ç–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 10)
        for i, post in enumerate(posts[-10:], 1):
            created_at = post.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            created_by = post.get('admin_id', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á admin_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            author_name = admin_names.get(created_by, '')
            if not author_name:
                author_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
            post_title = post.get('title', f"–ü–æ—Å—Ç #{post.get('id', '')}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ—Å—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.data_processing("–ø–æ—Å—Ç—ã", f"–ü–æ—Å—Ç #{i}: ID={post.get('id')}, admin_id={created_by}, author_name={author_name}")
            
            posts_text += f"<b>#{i} | {created_at}</b>\n"
            posts_text += f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n"
            posts_text += f"üìÑ <b>{post_title}</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏
            features = []
            if post.get('image_url'):
                features.append("üñºÔ∏è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            if post.get('button_text') and post.get('button_url'):
                features.append(f"üîó –∫–Ω–æ–ø–∫–∞ \"{post.get('button_text')}\"")
            
            if features:
                posts_text += f"   üìå {' ‚Ä¢ '.join(features)}\n"
            
            posts_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤
        keyboard = []
        for i, post in enumerate(posts[-10:], 1):
            keyboard.append([
                InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç #{i}", callback_data=f"send_post:{post.get('id')}")
            ])
        
        keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_posts")])
        
        await update.message.reply_text(
            posts_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return ConversationHandler.END
    
    async def cancel_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        user_id = update.effective_user.id
        logger.user_action(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", "–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ
        if 'post' in context.user_data:
            del context.user_data['post']
        if 'post_id' in context.user_data:
            del context.user_data['post_id']
        if 'edit_post_id' in context.user_data:
            del context.user_data['edit_post_id']
            logger.admin_action(user_id, "–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        await update.message.reply_text(
            "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ConversationHandler.END
    
    async def handle_post_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å—Ç–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        callback_data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø—Ä–∞–≤–∫–∏
        if callback_data == "post_help":
            help_text = (
                "üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ—Å—Ç–∞–º–∏:</b>\n\n"
                "üì© <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b> - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                "üóëÔ∏è <b>–£–¥–∞–ª–∏—Ç—å</b> - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ—Å—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ—Å—Ç–∞–º", callback_data="manage_posts_back")]]
            
            await query.edit_message_text(
                help_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SELECTING_POST_ACTION
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏ –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤
        if callback_data == "manage_posts_back":
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ manage_posts –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            await self.manage_posts(update, context)
            return SELECTING_POST_ACTION
        
        if callback_data == "cancel_posts":
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤
            await query.edit_message_text(
                "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                reply_markup=None
            )
            return ConversationHandler.END
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞
        if callback_data.startswith("send_post:"):
            post_id = callback_data.split(":", 1)[1]
            logger.user_action(user_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞", "–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", details={"post_id": post_id})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
            post = self.sheets.get_post_by_id(post_id)
            
            if not post:
                await query.edit_message_text(
                    "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    reply_markup=None
                )
                return ConversationHandler.END
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            keyboard = []
            keyboard.append([
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data=f"confirm_send:{post_id}")
            ])
            keyboard.append([
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_posts")
            ])
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            post_title = post.get('title', '')
            post_text = post.get('text', '')[:150] + ('...' if len(post.get('text', '')) > 150 else '')
            
            preview_text = post_text
            if post_title:
                preview_text = f"<b>{post_title}</b>\n\n{post_text}"
            
            await query.edit_message_text(
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n"
                f"<b>–ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞:</b>\n{preview_text}",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return ConversationHandler.END
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if callback_data.startswith("confirm_send:"):
            post_id = callback_data.split(":", 1)[1]
            logger.user_action(user_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏", details={"post_id": post_id})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
            post = self.sheets.get_post_by_id(post_id)
            
            if not post:
                await query.edit_message_text(
                    "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    reply_markup=None
                )
                return ConversationHandler.END
            
            # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            status_message = await query.edit_message_text(
                "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞...",
                reply_markup=None
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_data = self.sheets.get_users_list(page=1, page_size=10000)[0]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            await self.send_post_to_users(status_message, post, users_data)
            
            return ConversationHandler.END
        
        # –ï—Å–ª–∏ —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
        if callback_data.startswith("delete_post:"):
            post_id = callback_data.split(":", 1)[1]
            logger.user_action(user_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏", "–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", details={"post_id": post_id})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
            post = self.sheets.get_post_by_id(post_id)
            
            if not post:
                await query.edit_message_text(
                    "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    reply_markup=None
                )
                return ConversationHandler.END
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['delete_post_id'] = post_id
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{post_id}")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_posts")]
            ])
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            post_title = post.get('title', '')
            post_text = post.get('text', '')[:150] + ('...' if len(post.get('text', '')) > 150 else '')
            
            preview_text = post_text
            if post_title:
                preview_text = f"<b>{post_title}</b>\n\n{post_text}"
            
            await query.edit_message_text(
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?\n\n"
                f"<b>–ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞:</b>\n{preview_text}",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            return CONFIRMING_POST_DELETE
            
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if callback_data.startswith("confirm_delete:"):
            post_id = callback_data.split(":", 1)[1]
            logger.user_action(user_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", details={"post_id": post_id})
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
            if self.sheets.delete_post(post_id):
                await query.edit_message_text(
                    "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                    reply_markup=None
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=None
                )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ
            if 'delete_post_id' in context.user_data:
                del context.user_data['delete_post_id']
            
            return ConversationHandler.END
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–ª–±–µ–∫
        await query.edit_message_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=None
        )
        
        return ConversationHandler.END
    
    async def manage_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞, —É–¥–∞–ª–µ–Ω–∏–µ)"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∑–≤–∞–Ω –ª–∏ –º–µ—Ç–æ–¥ –∏–∑ –∫–æ–ª–±–µ–∫–∞ –∏–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if update.callback_query:
            # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –∏–∑ –∫–æ–ª–±–µ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_query
            query = update.callback_query
            user_id = query.from_user.id
            send_message = query.edit_message_text
        else:
            # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º message
            user_id = update.effective_user.id
            send_message = update.message.reply_text
        
        logger.user_action(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        posts = self.sheets.get_all_posts()
        
        if not posts:
            await send_message(
                "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_post, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç.",
                reply_markup=None
            )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω
        admin_data = self.sheets.get_admins_info()
        admin_names = {}
        for admin in admin_data:
            if len(admin) >= 3:  # ID, –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ
                admin_names[admin[0]] = admin[1]  # ID -> –∏–º—è
        
        logger.data_processing("–∞–¥–º–∏–Ω—ã", "–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ª–æ–≤–∞—Ä—å –∏–º—ë–Ω –∞–¥–º–∏–Ω–æ–≤", details=admin_names)
        logger.data_processing("–∞–¥–º–∏–Ω—ã", "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–æ–≤", details={"–¥–∞–Ω–Ω—ã–µ": admin_data})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å—Ç–æ–≤
        posts_text = "üìã <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏:</b>\n\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å—Ç–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 10)
        for i, post in enumerate(posts[-10:], 1):
            created_at = post.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            created_by = post.get('admin_id', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á admin_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            author_name = admin_names.get(created_by, '')
            if not author_name:
                author_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
            post_title = post.get('title', f"–ü–æ—Å—Ç #{post.get('id', '')}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ—Å—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.data_processing("–ø–æ—Å—Ç—ã", f"–ü–æ—Å—Ç #{i}: ID={post.get('id')}, admin_id={created_by}, author_name={author_name}")
            
            posts_text += f"<b>#{i} | {created_at}</b>\n"
            posts_text += f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n"
            posts_text += f"üìÑ <b>{post_title}</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏
            features = []
            if post.get('image_url'):
                features.append("üñºÔ∏è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            if post.get('button_text') and post.get('button_url'):
                features.append(f"üîó –∫–Ω–æ–ø–∫–∞ \"{post.get('button_text')}\"")
            
            if features:
                posts_text += f"   üìå {' ‚Ä¢ '.join(features)}\n"
            
            posts_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
        keyboard = []
        
        for i, post in enumerate(posts[-10:], 1):
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞: —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
            keyboard.append([
                InlineKeyboardButton(f"üì© #{i}", callback_data=f"send_post:{post.get('id')}"),
                InlineKeyboardButton(f"üóëÔ∏è #{i}", callback_data=f"delete_post:{post.get('id')}")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        keyboard.append([
            InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º", callback_data="post_help")
        ])
        keyboard.append([
            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel_posts")
        ])
        
        await send_message(
            posts_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return SELECTING_POST_ACTION