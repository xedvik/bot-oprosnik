"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""

import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler

from models.states import *
from utils.sheets import GoogleSheets
from handlers.base_handler import BaseHandler
from utils.helpers import setup_commands  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é setup_commands
from config import QUESTIONS_SHEET  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç QUESTIONS_SHEET

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class AdminHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, sheets: GoogleSheets, application=None):
        super().__init__(sheets)
        self.questions_with_options = self.sheets.get_questions_with_options()
        self.questions = list(self.questions_with_options.keys())
        self.application = application  # –°–æ—Ö—Ä–∞–Ω—è–µ–º application –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    async def list_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
        if not self.questions:
            await update.message.reply_text(
                "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_text = "üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"
        for i, question in enumerate(self.questions):
            options = self.questions_with_options[question]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            questions_text += f"{i+1}. {question}\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if not options:
                questions_text += "   üìù –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (–±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)\n\n"
                continue
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            options_list = []
            has_sub_options = False
            
            for opt in options:
                if isinstance(opt, dict) and "text" in opt:
                    option_text = opt["text"]
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
                    if "sub_options" in opt and opt["sub_options"]:
                        has_sub_options = True
                        sub_count = len(opt["sub_options"])
                        option_text += f" üìë (+{sub_count} –ø–æ–¥–≤–∞—Ä.)"
                    options_list.append(option_text)
                else:
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    options_list.append(str(opt))
            
            # –í—ã–≤–æ–¥ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            if has_sub_options:
                questions_text += "   üîÑ –í–æ–ø—Ä–æ—Å —Å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏\n"
            else:
                questions_text += "   ‚úÖ –í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤\n"
                
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            options_text = ", ".join(options_list)
            questions_text += f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {options_text}\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        await update.message.reply_text(
            questions_text,
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ConversationHandler.END
    
    async def add_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ADDING_QUESTION
    
    async def handle_new_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        question_text = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {question_text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        context.user_data['new_question'] = question_text
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = [
            [KeyboardButton("‚ú® –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")],
            [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å: {question_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=reply_markup
        )
        
        return CHOOSING_OPTIONS_TYPE
    
    async def handle_options_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        choice = update.message.text
        logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –æ—Ç–≤–µ—Ç–æ–≤: {choice}")
        
        if choice == "‚ú® –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç":
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            question = context.user_data['new_question']
            success = self.sheets.add_question(question, [])
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —á–µ—Ä–µ–∑ application
                await self._update_handlers_questions(update)
                
                await update.message.reply_text(
                    f"‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n{question}\n\n–¢–∏–ø: –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                    reply_markup=ReplyKeyboardRemove()
                )
            return ConversationHandler.END
            
        elif choice == "üìù –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤":
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            context.user_data['options'] = []
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            keyboard = [[KeyboardButton("–ì–æ—Ç–æ–≤–æ")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:",
                reply_markup=reply_markup
            )
            
            return ADDING_OPTIONS
            
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("‚ú® –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")],
                    [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")]
                ], resize_keyboard=True)
            )
            
            return CHOOSING_OPTIONS_TYPE
    
    async def handle_option_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        choice = update.message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {choice}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'new_question' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        question = context.user_data['new_question']
        
        if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ì–æ—Ç–æ–≤–æ", –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        if choice == "–ì–æ—Ç–æ–≤–æ":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = context.user_data.get('options', [])
            if not options:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.",
                    reply_markup=ReplyKeyboardMarkup([
                        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
                    ], resize_keyboard=True)
                )
                return ADDING_OPTIONS
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            success = self.sheets.add_question(question, options)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                await self._update_handlers_questions(update)
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                keyboard = [
                    [KeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")],
                    [KeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                options_display = "\n".join(f"‚Ä¢ {opt['text']}" for opt in options)
                
                await update.message.reply_text(
                    f"‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n{question}\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{options_display}\n\n"
                    "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∫ –∫–∞–∫–∏–º-–ª–∏–±–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤?",
                    reply_markup=reply_markup
                )
                
                return ADDING_NESTED_OPTIONS
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
        
        # –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
        if context.user_data.get('free_form'):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            success = self.sheets.add_question(question)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                await self._update_handlers_questions(update)
                
                await update.message.reply_text(
                    f"‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n{question}",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                    reply_markup=ReplyKeyboardRemove()
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
            return ConversationHandler.END
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
        if 'options' not in context.user_data:
            context.user_data['options'] = []
            
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ sub_options
        context.user_data['options'].append({"text": choice})
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ
        options_list = "\n".join([f"{i+1}. {opt['text']}" for i, opt in enumerate(context.user_data['options'])])
        
        keyboard = [
            [KeyboardButton("–ì–æ—Ç–æ–≤–æ")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {choice}\n\n"
            f"–¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{options_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ:",
            reply_markup=reply_markup
        )
        
        return ADDING_OPTIONS
    
    async def handle_nested_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"""
        text = update.message.text
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {text}")
        logger.info(f"–¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ context.user_data: {context.user_data.keys()}")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ—Ç", –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        if text == "‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å":
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for key in ['selecting_parent_option', 'parent_option', 'sub_options', 'adding_sub_option']:
                if key in context.user_data:
                    context.user_data.pop(key)
            
            await update.message.reply_text(
                "‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        if text == "‚úÖ –î–∞, –∫ –¥—Ä—É–≥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É" or text == "‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã":
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '{text}' –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            
            # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            if 'selecting_parent_option' in context.user_data:
                # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                for key in ['selecting_parent_option', 'parent_option', 'sub_options', 'adding_sub_option']:
                    if key in context.user_data:
                        context.user_data.pop(key)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                if 'current_question' in context.user_data:
                    question = context.user_data['current_question']
                    if question in self.questions_with_options:
                        options = self.questions_with_options[question]
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                        keyboard = []
                        for option in options:
                            if isinstance(option, dict) and "text" in option:
                                keyboard.append([KeyboardButton(option["text"])])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
                        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
                        
                        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                        
                        await update.message.reply_text(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
                            reply_markup=reply_markup
                        )
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        context.user_data['selecting_parent_option'] = True
                        return ADDING_NESTED_OPTIONS
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –∑–∞–≤–µ—Ä—à–∞–µ–º
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
            
            # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –≤ –¥—Ä—É–≥–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö
            else:
                # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if 'new_question' in context.user_data:
                    question = context.user_data['new_question']
                    context.user_data['current_question'] = question
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    if 'options' in context.user_data and context.user_data['options']:
                        options = context.user_data['options']
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                        keyboard = []
                        for option in options:
                            if isinstance(option, dict) and "text" in option:
                                keyboard.append([KeyboardButton(option["text"])])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
                        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
                        
                        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                        
                        await update.message.reply_text(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
                            reply_markup=reply_markup
                        )
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        context.user_data['selecting_parent_option'] = True
                        return ADDING_NESTED_OPTIONS
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            for key in ['selecting_parent_option', 'parent_option', 'sub_options', 'adding_sub_option']:
                if key in context.user_data:
                    context.user_data.pop(key)
            
            await update.message.reply_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        if 'selecting_parent_option' in context.user_data and context.user_data['selecting_parent_option']:
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            context.user_data.pop('selecting_parent_option')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            context.user_data['parent_option'] = text
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            context.user_data['sub_options'] = []
            
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            keyboard = [
                [KeyboardButton("‚ú® –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º")],
                [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã")],
                [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç '{text}'. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=reply_markup
            )
            
            return ADDING_NESTED_OPTIONS
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º"
        if text == "‚ú® –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º" and 'parent_option' in context.user_data:
            parent_option_text = context.user_data['parent_option']
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–°–¥–µ–ª–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º' –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {parent_option_text}")
            
            question = None
            question_num = -1
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            if 'current_question' in context.user_data:
                question = context.user_data['current_question']
                logger.info(f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: '{question}', —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: '{parent_option_text}'")
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
                for i, q in enumerate(self.questions):
                    if q == question:
                        question_num = i
                        context.user_data['editing_question_num'] = i
                        break
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
            current_options = []
            if question in self.questions_with_options:
                current_options = self.questions_with_options[question]
                logger.info(f"–¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question}': {current_options}")
                
                # –ù–∞—Ö–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
                for i, opt in enumerate(current_options):
                    if isinstance(opt, dict) and "text" in opt and opt["text"] == parent_option_text:
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç)
                        current_options[i]["sub_options"] = []
                        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ sub_options –¥–ª—è '{parent_option_text}' - —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {current_options[i]}")
                        break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_num}, –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º sub_options: {current_options}")
            success = self.sheets.edit_question_options(question_index=question_num, options=current_options)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if question in self.questions_with_options:
                    updated_options = self.questions_with_options[question]
                    found_option = None
                    for opt in updated_options:
                        if isinstance(opt, dict) and "text" in opt and opt["text"] == parent_option_text:
                            found_option = opt
                            if "sub_options" in opt and isinstance(opt["sub_options"], list) and opt["sub_options"] == []:
                                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' —Å–æ—Ö—Ä–∞–Ω–∏–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ sub_options=[] (—Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç)")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' –ù–ï –∏–º–µ–µ—Ç –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ sub_options! –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {opt}")
                            break
                    
                    # –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ '{question}' –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                    for i, opt in enumerate(updated_options, start=1):
                        if isinstance(opt, dict) and "text" in opt:
                            if "sub_options" in opt and isinstance(opt["sub_options"], list) and opt["sub_options"] == []:
                                logger.info(f"  –û–ø—Ü–∏—è {i}: '{opt['text']}', sub_options: []")
                            elif "sub_options" in opt and opt["sub_options"]:
                                logger.info(f"  –û–ø—Ü–∏—è {i}: '{opt['text']}', sub_options: {opt['sub_options']}")
                            else:
                                logger.info(f"  –û–ø—Ü–∏—è {i}: '{opt['text']}', –±–µ–∑ sub_options")
                        else:
                            logger.info(f"  –û–ø—Ü–∏—è {i}: {opt}, –±–µ–∑ sub_options")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                await self._update_handlers_questions(update)
                
                # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                await update.message.reply_text(
                    f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '{parent_option_text}':",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                context.user_data['parent_option'] = parent_option_text
                context.user_data['editing_question'] = question
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ADDING_FREE_TEXT_PROMPT –∏–∑ handle_nested_options –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '{parent_option_text}'")
                return ADDING_FREE_TEXT_PROMPT
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option_text}' —Å–≤–æ–±–æ–¥–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                for key in ['selecting_parent_option', 'parent_option', 'sub_options', 'adding_sub_option']:
                    if key in context.user_data:
                        context.user_data.pop(key)
                return ConversationHandler.END
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã"
        if text == "üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã" and 'parent_option' in context.user_data:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            context.user_data['adding_sub_option'] = True
            
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è '{context.user_data['parent_option']}' (–∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏).\n"
                "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
                reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
            )
            
            return ADDING_NESTED_OPTIONS
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª "–ì–æ—Ç–æ–≤–æ"
        if text == "–ì–æ—Ç–æ–≤–æ" and 'adding_sub_option' in context.user_data and 'sub_options' in context.user_data:
            parent_option_text = context.user_data['parent_option']
            sub_options = context.user_data['sub_options']
            
            question = None
            question_num = -1
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            if 'current_question' in context.user_data:
                question = context.user_data['current_question']
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
                for i, q in enumerate(self.questions):
                    if q == question:
                        question_num = i
                        context.user_data['editing_question_num'] = i
                        break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã
            if not sub_options:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                for key in ['selecting_parent_option', 'parent_option', 'sub_options', 'adding_sub_option']:
                    if key in context.user_data:
                        context.user_data.pop(key)
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
            current_options = []
            if question in self.questions_with_options:
                current_options = self.questions_with_options[question]
                
                # –ù–∞—Ö–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
                for i, opt in enumerate(current_options):
                    if isinstance(opt, dict) and "text" in opt and opt["text"] == parent_option_text:
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã
                        current_options[i]["sub_options"] = sub_options
                        break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
            success = self.sheets.edit_question_options(question_index=question_num, options=current_options)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                self.questions_with_options = self.sheets.get_questions_with_options()
                self.questions = list(self.questions_with_options.keys())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                await self._update_handlers_questions(update)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                sub_options_text = "\n".join([f"- {sub_opt}" for sub_opt in sub_options])
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫ –¥—Ä—É–≥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
                keyboard = [
                    [KeyboardButton("‚úÖ –î–∞, –∫ –¥—Ä—É–≥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É")],
                    [KeyboardButton("‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{parent_option_text}' –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n{sub_options_text}\n\n"
                    "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫ –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É?",
                    reply_markup=reply_markup
                )
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.pop('adding_sub_option', None)
                context.user_data.pop('sub_options', None)
                context.user_data.pop('parent_option', None)
                
                return ADDING_NESTED_OPTIONS
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{parent_option_text}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                for key in ['selecting_parent_option', 'parent_option', 'sub_options', 'adding_sub_option']:
                    if key in context.user_data:
                        context.user_data.pop(key)
                return ConversationHandler.END
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã
        if 'adding_sub_option' in context.user_data and 'sub_options' in context.user_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–∫ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã
            if text not in ["‚ùå –û—Ç–º–µ–Ω–∞", "‚úÖ –î–∞, –∫ –¥—Ä—É–≥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É", "‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", "‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å"]:
                context.user_data['sub_options'].append(text)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç '{text}' –¥–ª—è '{context.user_data['parent_option']}'")
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç '{text}' –¥–æ–±–∞–≤–ª–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
                    reply_markup=ReplyKeyboardMarkup([["–ì–æ—Ç–æ–≤–æ"], ["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
                )
            else:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ '{text}', –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç")
        
        return ADDING_NESTED_OPTIONS
    
    async def clear_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=reply_markup
        )
        
        return CONFIRMING_CLEAR

    async def handle_clear_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        choice = update.message.text
        user_id = update.effective_user.id
        
        if choice == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É":
            logger.info(f"[{user_id}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            success = self.sheets.clear_answers_and_stats()
            
            if success:
                await update.message.reply_text(
                    "‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.",
                    reply_markup=ReplyKeyboardRemove()
                )
                logger.info(f"[{user_id}] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=ReplyKeyboardRemove()
                )
                logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        
        elif choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.info(f"[{user_id}] –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É")],
                    [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
                ], resize_keyboard=True)
            )
            return CONFIRMING_CLEAR
        
        return ConversationHandler.END 

    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            "ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É –±–æ—Ç–∞ @userinfobot\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ADDING_ADMIN

    async def handle_new_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —à–∞–≥ 1: ID"""
        try:
            message = update.message
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
            if not message.text:
                await message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ–º."
                )
                return ADDING_ADMIN
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
            try:
                new_admin_id = int(message.text)
            except ValueError:
                await message.reply_text(
                    "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
                return ADDING_ADMIN

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ context
            context.user_data['new_admin_id'] = new_admin_id
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
            return ADDING_ADMIN_NAME

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return ConversationHandler.END

    async def handle_admin_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —à–∞–≥ 2: –∏–º—è"""
        try:
            message = update.message
            admin_name = message.text

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ context
            context.user_data['admin_name'] = admin_name

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            await message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
            return ADDING_ADMIN_DESCRIPTION

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return ConversationHandler.END

    async def handle_admin_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —à–∞–≥ 3: –æ–ø–∏—Å–∞–Ω–∏–µ"""
        try:
            message = update.message
            admin_description = message.text
            new_admin_id = context.user_data.get('new_admin_id')
            admin_name = context.user_data.get('admin_name')

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            success = self.sheets.add_admin(new_admin_id, admin_name, admin_description)

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –ø–∞–º—è—Ç–∏
                admin_ids = self.sheets.get_admins()
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
                await setup_commands(self.application, admin_ids)
                
                admin_info = await self.sheets.get_admin_info(new_admin_id)
                await message.reply_text(
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                    f"ID: {new_admin_id}\n"
                    f"–ò–º—è: {admin_name}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {admin_description}\n"
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {admin_info}"
                )
            else:
                await message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            return ConversationHandler.END

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return ConversationHandler.END

    async def remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admins = await self.sheets.get_admins_list()
        
        if not admins:
            await update.message.reply_text(
                "‚ùå –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω–∞–º–∏
        keyboard = []
        for admin_id, admin_info in admins:
            keyboard.append([KeyboardButton(f"{admin_id} - {admin_info}")])
        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        
        return REMOVING_ADMIN

    async def handle_admin_remove(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        choice = update.message.text
        
        if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        try:
            admin_id = int(choice.split(" - ")[0])
            success = self.sheets.remove_admin(admin_id)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –ø–∞–º—è—Ç–∏
                admin_ids = self.sheets.get_admins()
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
                await setup_commands(self.application, admin_ids)
                
                await update.message.reply_text(
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=ReplyKeyboardRemove()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
        
        return ConversationHandler.END

    async def list_admins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        
        admins = await self.sheets.get_admins_list()
        
        if not admins:
            await update.message.reply_text(
                "üìù –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤
        admins_text = "üìù –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
        for admin_id, admin_info in admins:
            admins_text += f"‚Ä¢ {admin_id} - {admin_info}\n"
        
        await update.message.reply_text(
            admins_text,
            reply_markup=ReplyKeyboardRemove()
        ) 

    async def handle_add_free_text_prompt(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        prompt = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {prompt}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if 'editing_question' not in context.user_data or 'editing_option' not in context.user_data:
            logger.error("–û—à–∏–±–∫–∞: editing_question –∏–ª–∏ editing_option –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ context.user_data")
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ context.user_data: {context.user_data.keys()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            question = context.user_data.get('current_question')
            parent_option = context.user_data.get('parent_option')
            
            if not question or not parent_option:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            context.user_data['editing_question'] = question
            context.user_data['editing_option'] = parent_option
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –≤–æ–ø—Ä–æ—Å '{question}', –≤–∞—Ä–∏–∞–Ω—Ç '{parent_option}'")
        
        question = context.user_data['editing_question']
        parent_option_text = context.user_data['editing_option']
        parent_option_index = context.user_data.get('editing_option_index', -1)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        question_num = context.user_data.get('editing_question_num', -1)
        if question_num == -1:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            for i, q in enumerate(self.questions):
                if q == question:
                    question_num = i
                    context.user_data['editing_question_num'] = i
                    break
                
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–æ–ø—Ä–æ—Å: '{question}', –≤–∞—Ä–∏–∞–Ω—Ç: '{parent_option_text}', –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞: {question_num}")
        
        # –í–º–µ—Å—Ç–æ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ
        try:
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
            logger.info(f"–í—ã–∑—ã–≤–∞–µ–º edit_question_options_with_free_text —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: question_index={question_num}, option_text='{parent_option_text}', free_text_prompt='{prompt}'")
            success = self.sheets.edit_question_options_with_free_text(
                question_index=question_num,
                option_text=parent_option_text,
                free_text_prompt=prompt
            )
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º: {success}")
        except AttributeError:
            # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ edit_question_options_with_free_text –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            logger.warning(f"–ú–µ—Ç–æ–¥ edit_question_options_with_free_text –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
            success = self.sheets.edit_question_options(
                question_index=question_num, 
                options=self.questions_with_options[question],
                free_text_prompt=prompt, 
                parent_option_text=parent_option_text
            )
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –≤ sheets –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.questions_with_options = self.sheets.get_questions_with_options()
            self.questions = list(self.questions_with_options.keys())
            
            await update.message.reply_text(
                f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω: '{prompt}'",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
            await self._update_handlers_questions(update)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫ –¥—Ä—É–≥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
            keyboard = [
                [KeyboardButton("‚úÖ –î–∞, –∫ –¥—Ä—É–≥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É")],
                [KeyboardButton("‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫ –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É?",
                reply_markup=reply_markup
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –¥—Ä—É–≥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
            context.user_data.pop('editing_option', None)
            context.user_data.pop('editing_option_index', None)
            
            # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ADDING_NESTED_OPTIONS
            # –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
            if 'editing_question' in context.user_data:
                context.user_data['current_question'] = context.user_data['editing_question']
                
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            logger.info(f"–í–æ–∑–≤—Ä–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è ADDING_NESTED_OPTIONS –∏–∑ handle_add_free_text_prompt –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞")
            return ADDING_NESTED_OPTIONS
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '{parent_option_text}'")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('editing_option', None)
        context.user_data.pop('editing_option_index', None)
        return ConversationHandler.END

    async def _update_handlers_questions(self, update: Update):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö"""
        try:
            if not self.application:
                logger.error("Application –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            old_questions_count = len(self.questions)
            self.questions_with_options = self.sheets.get_questions_with_options()
            self.questions = list(self.questions_with_options.keys())
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ AdminHandler. –ë—ã–ª–æ: {old_questions_count}, —Å—Ç–∞–ª–æ: {len(self.questions)}")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(self.questions)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
            for handler in self.application.handlers[0]:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è SurveyHandler
                if isinstance(handler, ConversationHandler) and hasattr(handler, 'name') and handler.name == "survey_conversation":
                    # –ù–∞—Ö–æ–¥–∏–º SurveyHandler –≤ entry_points
                    for entry_point in handler.entry_points:
                        if hasattr(entry_point.callback, '__self__'):
                            survey_handler = entry_point.callback.__self__
                            old_count = len(survey_handler.questions)
                            # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è questions_with_options, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                            survey_handler.questions_with_options = self.questions_with_options.copy()
                            survey_handler.questions = self.questions.copy()
                            
                            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
                            new_states = {}
                            
                            # –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
                            for state, handlers_list in handler.states.items():
                                if not state.startswith("QUESTION_") or state in ["WAITING_START", "WAITING_EVENT_INFO", "CONFIRMING", "SUB_OPTIONS"]:
                                    new_states[state] = handlers_list
                            
                            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                            for i in range(len(self.questions)):
                                question_state = f"QUESTION_{i}"
                                new_states[question_state] = [MessageHandler(filters.TEXT & ~filters.COMMAND, survey_handler.handle_answer)]
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                                sub_question_state = f"QUESTION_{i}_SUB"
                                new_states[sub_question_state] = [MessageHandler(filters.TEXT & ~filters.COMMAND, survey_handler.handle_answer)]
                            
                            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–≤—ã–º–∏
                            handler.states.clear()
                            handler.states.update(new_states)
                            
                            logger.info(f"–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ SurveyHandler. –ë—ã–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {old_count}, —Å—Ç–∞–ª–æ: {len(self.questions)}")
                            break
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è EditHandler
                if isinstance(handler, ConversationHandler) and hasattr(handler, 'name') and handler.name == "edit_question_conversation":
                    # –ù–∞—Ö–æ–¥–∏–º EditHandler –≤ entry_points
                    for entry_point in handler.entry_points:
                        if hasattr(entry_point.callback, '__self__'):
                            edit_handler = entry_point.callback.__self__
                            old_count = len(edit_handler.questions)
                            edit_handler.questions_with_options = self.questions_with_options.copy()
                            edit_handler.questions = self.questions.copy()
                            
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ EditHandler. –ë—ã–ª–æ: {old_count}, —Å—Ç–∞–ª–æ: {len(self.questions)}")
                            break
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è DeleteQuestionHandler
                if isinstance(handler, ConversationHandler) and hasattr(handler, 'name') and handler.name == "delete_question_conversation":
                    # –ù–∞—Ö–æ–¥–∏–º DeleteQuestionHandler –≤ entry_points
                    for entry_point in handler.entry_points:
                        if hasattr(entry_point.callback, '__self__'):
                            delete_handler = entry_point.callback.__self__
                            old_count = len(delete_handler.questions)
                            delete_handler.questions_with_options = self.questions_with_options.copy()
                            delete_handler.questions = self.questions.copy()
                            
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ DeleteQuestionHandler. –ë—ã–ª–æ: {old_count}, —Å—Ç–∞–ª–æ: {len(self.questions)}")
                            break
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è ListQuestionsHandler
                if isinstance(handler, CommandHandler) and handler.callback.__name__ == "list_questions":
                    if hasattr(handler.callback, '__self__'):
                        list_questions_handler = handler.callback.__self__
                        if hasattr(list_questions_handler, 'questions'):
                            old_count = len(list_questions_handler.questions)
                            list_questions_handler.questions_with_options = self.questions_with_options.copy()
                            list_questions_handler.questions = self.questions.copy()
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ ListQuestionsHandler. –ë—ã–ª–æ: {old_count}, —Å—Ç–∞–ª–æ: {len(self.questions)}")

            logger.info(f"–°–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö. –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(self.questions)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            logger.exception(e)

    async def reset_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–±—Ä–æ—Å –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return RESETTING_USER

    async def handle_reset_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = int(update.message.text)
            success = self.sheets.reset_user_survey(user_id)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ–ø—Ä–æ—Å–∞",
                    reply_markup=ReplyKeyboardRemove()
                )
                
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)",
                reply_markup=ReplyKeyboardRemove()
            )
            return RESETTING_USER
            
        return ConversationHandler.END

    async def list_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context
        context.user_data['users_page'] = 1
        context.user_data['users_page_size'] = 10  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await self._show_users_page(update, context)
        
        return BROWSING_USERS

    async def handle_users_pagination(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = update.message.text
        
        if query == "‚ùå –ó–∞–∫—Ä—ã—Ç—å":
            await update.message.reply_text(
                "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        elif query == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è":
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if context.user_data.get('users_page', 1) > 1:
                context.user_data['users_page'] -= 1
                
        elif query == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è":
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            current_page = context.user_data.get('users_page', 1)
            total_pages = context.user_data.get('users_total_pages', 1)
            
            if current_page < total_pages:
                context.user_data['users_page'] += 1
                
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await self._show_users_page(update, context)
        return BROWSING_USERS
        
    async def _show_users_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        page = context.user_data.get('users_page', 1)
        page_size = context.user_data.get('users_page_size', 10)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        users, total_users, total_pages = self.sheets.get_users_list(page, page_size)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        context.user_data['users_total_pages'] = total_pages
        
        if not users:
            await update.message.reply_text(
                "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
        for user_id, telegram_id, username, reg_date in users:
            users_text += f"üÜî {user_id} | Telegram: {telegram_id}\n"
            users_text += f"üë§ @{username}\n"
            users_text += f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg_date}\n"
            users_text += f"{'‚îÄ' * 30}\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        users_text += f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(KeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"))
        if page < total_pages:
            pagination_buttons.append(KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"))
            
        if pagination_buttons:
            keyboard.append(pagination_buttons)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        keyboard.append([KeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        await update.message.reply_text(
            users_text,
            reply_markup=reply_markup
        ) 

    async def handle_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        users = self.sheets.get_users_list()
        
        if not users:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        users_text = f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}\n\n"
        
        for i, user in enumerate(users, start=1):
            user_id = user.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            event_info = user.get('event_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            category = user.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            survey_date = user.get('survey_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            users_text += f"{i}. ID: `{user_id}`\n   –ò–º—è: {name}\n   –ò–Ω—Ñ–æ: {event_info}\n   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n   –î–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞: {survey_date}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(users_text) > 4096:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            chunks = []
            current_chunk = ""
            
            for line in users_text.split('\n'):
                if len(current_chunk) + len(line) + 1 > 4096:
                    chunks.append(current_chunk)
                    current_chunk = line
                else:
                    current_chunk += line + '\n'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
            if current_chunk:
                chunks.append(current_chunk)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, chunk in enumerate(chunks):
                # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å reply_markup
                if i == len(chunks) - 1:
                    reply_markup = ReplyKeyboardRemove()
                else:
                    reply_markup = None
                
                await update.message.reply_text(
                    chunk,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É
            reply_markup = ReplyKeyboardRemove()
            
            await update.message.reply_text(
                users_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        return ConversationHandler.END 