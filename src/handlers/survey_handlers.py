"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
"""

import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
import asyncio
from datetime import datetime

from models.states import *
from handlers.base_handler import BaseHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class SurveyHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
    
    async def begin_survey(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞"""
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–æ—Å
        if self.sheets.has_user_completed_survey(user_id):
            await update.message.reply_text(
                "‚ùå –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
        if not self.questions:
            await update.message.reply_text(
                "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
        context.user_data['answers'] = []
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        return await self.send_question(update, context)
    
    async def send_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_question_num = len(context.user_data['answers'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        if current_question_num >= len(self.questions):
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            return await self.show_confirmation(update, context)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = self.questions[current_question_num]
        options = self.questions_with_options[question]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        parent_answer = context.user_data.get('current_parent_answer', None)
        parent_option = None
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if options:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if parent_answer:
                # –ù–∞–π–¥–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                for opt in options:
                    if opt["text"] == parent_answer:
                        parent_option = opt
                        break
                
                if parent_option and parent_option["sub_options"]:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                    keyboard = [[KeyboardButton(sub_opt)] for sub_opt in parent_option["sub_options"]]
                    keyboard.append([KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º")])
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                    await update.message.reply_text(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {parent_answer}\n"
                        f"–í–æ–ø—Ä–æ—Å {current_question_num + 1}/{len(self.questions)}:\n\n{question}\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                        reply_markup=reply_markup
                    )
                    return f"QUESTION_{current_question_num}_SUB"
                else:
                    # –ï—Å–ª–∏ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ
                    context.user_data['answers'].append(parent_answer)
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                    context.user_data.pop('current_parent_answer', None)
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç: {parent_answer}")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    return await self.send_question(update, context)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                keyboard = [[KeyboardButton(opt["text"])] for opt in options]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        else:
            # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
            reply_markup = ReplyKeyboardRemove()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å {current_question_num + 1}/{len(self.questions)}:\n\n{question}",
            reply_markup=reply_markup
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        return f"QUESTION_{current_question_num}"
    
    async def handle_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        answer = update.message.text
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'answers'
        if 'answers' not in context.user_data:
            context.user_data['answers'] = []
            logger.warning(f"[{user_id}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤")
        
        current_question_num = len(context.user_data['answers'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        if current_question_num == len(self.questions):
            if answer == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
                logger.info(f"[{user_id}] –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
                start_time = datetime.now()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success = self.sheets.save_answers(context.user_data['answers'], user_id)
                
                if success:
                    save_duration = (datetime.now() - start_time).total_seconds()
                    logger.info(f"[{user_id}] –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–∞ {save_duration:.2f} —Å–µ–∫—É–Ω–¥")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞
                    await self.finish_survey(update, context)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    logger.info(f"[{user_id}] –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                    asyncio.create_task(self.update_statistics_async())
                else:
                    logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data.clear()
                return ConversationHandler.END
                
            elif answer == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                context.user_data['answers'] = []
                context.user_data.pop('current_parent_answer', None)
                return await self.send_question(update, context)
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                    reply_markup=ReplyKeyboardMarkup([
                        [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                        [KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
                    ], resize_keyboard=True)
                )
                return CONFIRMING
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        current_question = self.questions[current_question_num]
        available_options = self.questions_with_options[current_question]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        if update.callback_query and update.callback_query.data == 'QUESTION_SUB':
            state = f"QUESTION_{current_question_num}_SUB"
            # –ù–∞–π–¥–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –µ–≥–æ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã
            parent_answer = context.user_data.get('current_parent_answer')
            parent_option = None
            
            for opt in available_options:
                if opt["text"] == parent_answer:
                    parent_option = opt
                    break
            
            if parent_option and parent_option["sub_options"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                if answer == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
                    context.user_data.pop('current_parent_answer', None)
                    return await self.send_question(update, context)
                
                if answer not in parent_option["sub_options"]:
                    # –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                    keyboard = [[KeyboardButton(sub_opt)] for sub_opt in parent_option["sub_options"]]
                    keyboard.append([KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º")])
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    
                    await update.message.reply_text(
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                        reply_markup=reply_markup
                    )
                    return state
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π + –¥–æ—á–µ—Ä–Ω–∏–π)
                full_answer = f"{parent_answer} - {answer}"
                context.user_data['answers'].append(full_answer)
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                context.user_data.pop('current_parent_answer', None)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–æ—Å—Ç–∞–≤–Ω–æ–π –æ—Ç–≤–µ—Ç: {full_answer}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                return await self.send_question(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        if available_options:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            option_texts = [opt["text"] for opt in available_options]
            
            if answer not in option_texts:
                logger.warning(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ—Ç–≤–µ—Ç: {answer}")
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                keyboard = [[KeyboardButton(opt["text"])] for opt in available_options]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:",
                    reply_markup=reply_markup
                )
                return f"QUESTION_{current_question_num}"
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            selected_option = None
            for opt in available_options:
                if opt["text"] == answer:
                    selected_option = opt
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã
            if selected_option and selected_option["sub_options"]:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                context.user_data['current_parent_answer'] = answer
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã
                return await self.send_question(update, context)
            
            # –ï—Å–ª–∏ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ
            context.user_data['answers'].append(answer)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç: {answer}")
        else:
            # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            context.user_data['answers'].append(answer)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        return await self.send_question(update, context)
    
    async def show_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        answers_text = "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n"
        for i, (question, answer) in enumerate(zip(self.questions, context.user_data['answers'])):
            answers_text += f"{i+1}. {question}\n‚û°Ô∏è {answer}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await update.message.reply_text(
            f"{answers_text}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=reply_markup
        )
        
        return CONFIRMING
    
    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞"""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
        total_surveys = self.sheets.get_total_surveys_count()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        statistics = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞\nüë• –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {total_surveys}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_data = self.sheets.get_statistics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if not stats_data:
            statistics = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await update.message.reply_text(
                statistics,
                reply_markup=ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )
            
            return ConversationHandler.END
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
        grouped_stats = {}
        for question, option, count in stats_data:
            if question not in grouped_stats:
                grouped_stats[question] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ –æ—Ç–≤–µ—Ç–∞
            grouped_stats[question].append((option, count))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for question, options_data in grouped_stats.items():
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
            statistics += f"*{question}*\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            for option, count in options_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–º (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "  ‚îî ")
                if option.startswith("  ‚îî "):
                    # –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
                    statistics += f"   ‚îî {option[4:]}: {count}\n"
                else:
                    statistics += f"‚îî {option}: {count}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
            statistics += "\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
        await update.message.reply_text(
            statistics,
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END

    async def update_statistics_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            start_time = datetime.now()
            logger.info("–ù–∞—á–∞–ª–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
            self.sheets.update_statistics_sheet()
            
            duration = (datetime.now() - start_time).total_seconds()
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}") 