"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
"""

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
import asyncio
from datetime import datetime
import time

from models.states import *
from handlers.base_handler import BaseHandler
from config import QUESTIONS_SHEET  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
from utils.logger import get_logger
from utils.sheets_cache import sheets_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = get_logger()

class SurveyHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
    
    async def begin_survey(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞"""
        user_id = update.effective_user.id
        logger.user_action(user_id, "–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞", "–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–æ—Å
        if self.sheets.has_user_completed_survey(user_id):
            await update.message.reply_text(
                "‚ùå –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
        if not self.questions:
            await update.message.reply_text(
                "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
        context.user_data['answers'] = []
        logger.warning(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (answers_init)", 
                    details={"user_id": user_id, "–ø—Ä–∏—á–∏–Ω–∞": "–æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –∫–ª—é—á 'answers'"})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        return await self.send_question(update, context)
    
    async def send_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'answers'
        if 'answers' not in context.user_data:
            context.user_data['answers'] = []
            logger.warning(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (answers_init)", 
                        details={"user_id": user_id, "–ø—Ä–∏—á–∏–Ω–∞": "–æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –∫–ª—é—á 'answers'"})
        
        current_question_num = len(context.user_data['answers'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
        if current_question_num >= len(self.questions):
            logger.user_action(user_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞", details={"–ø—Ä–∏—á–∏–Ω–∞": "–≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã"})
            
            text = "‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!*\n\n"
            text += "üìã *–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:*\n"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            for i, q in enumerate(self.questions):
                if i < len(context.user_data['answers']):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    answer = context.user_data['answers'][i]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤ –Ω–∞—á–∞–ª–æ
                    formatted_question = q
                    if not formatted_question.startswith(f"{i+1}.") and not formatted_question.startswith(f"{i+1} "):
                        formatted_question = f"{i+1}. {formatted_question}"
                    
                    text += f"{formatted_question}: *{answer}*\n"
            
            text += "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply_markup = ReplyKeyboardMarkup([
                [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                [KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
            ], resize_keyboard=True)
            
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return CONFIRMING
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        current_question = self.questions[current_question_num]
        logger.user_action(user_id, "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", details={"–Ω–æ–º–µ—Ä": current_question_num+1, "–≤–æ–ø—Ä–æ—Å": current_question})
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        logger.data_processing("–≤–æ–ø—Ä–æ—Å", "–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞", details={"–Ω–æ–º–µ—Ä": current_question_num+1, "—Ç–∏–ø": str(type(current_question)), 
                               "–¥–ª–∏–Ω–∞": len(str(current_question)), "user_id": user_id})
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        display_question = current_question
        
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if len(str(current_question)) <= 3 or str(current_question).isdigit():
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: '{current_question}' (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π_–≤–æ–ø—Ä–æ—Å)", 
                          details={"user_id": user_id, "–¥–ª–∏–Ω–∞": len(str(current_question))})
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
                all_questions = self.sheets.get_questions_with_options()
                found_full_question = False
                
                # –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É
                question_number = str(current_question).strip()
                
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–º–∏
                for full_question in all_questions.keys():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞
                    if full_question.startswith(question_number + ".") or full_question.startswith(question_number + " "):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –∑–∞–¥–∞–≤–∞–ª—Å—è
                        already_asked = False
                        for i in range(current_question_num):
                            if self.questions[i] == full_question:
                                already_asked = True
                                break
                                
                        if not already_asked:
                            logger.data_processing("–≤–æ–ø—Ä–æ—Å", "–ó–∞–º–µ–Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞", details={"–≤–æ–ø—Ä–æ—Å": current_question, 
                                                  "–Ω–∞": full_question, "user_id": user_id})
                            display_question = full_question
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
                            self.questions[current_question_num] = full_question
                            found_full_question = True
                            break
                        else:
                            logger.data_processing("–≤–æ–ø—Ä–æ—Å", "–ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞", details={"–≤–æ–ø—Ä–æ—Å": full_question, 
                                                  "–ø—Ä–∏—á–∏–Ω–∞": "—É–∂–µ –∑–∞–¥–∞–Ω", "user_id": user_id})
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—â–µ–º –≤ –ª–∏—Å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é
                if not found_full_question:
                    sheet_values = self.sheets.get_sheet_values(QUESTIONS_SHEET)
                    if sheet_values:
                        for row in sheet_values[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                            if row and row[0]:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞
                                if (row[0].startswith(question_number + ".") or 
                                    row[0].startswith(question_number + " ")):
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –∑–∞–¥–∞–≤–∞–ª—Å—è
                                    already_asked = False
                                    for i in range(current_question_num):
                                        if self.questions[i] == row[0]:
                                            already_asked = True
                                            break
                                            
                                    if not already_asked:
                                        logger.data_processing("–≤–æ–ø—Ä–æ—Å", "–ó–∞–º–µ–Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞", details={"–≤–æ–ø—Ä–æ—Å": current_question, 
                                                      "–Ω–∞": row[0], "user_id": user_id})
                                        display_question = row[0]
                                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤
                                        self.questions[current_question_num] = row[0]
                                        found_full_question = True
                                        break
                                    else:
                                        logger.data_processing("–≤–æ–ø—Ä–æ—Å", "–ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞", details={"–≤–æ–ø—Ä–æ—Å": row[0], 
                                                      "–ø—Ä–∏—á–∏–Ω–∞": "—É–∂–µ –∑–∞–¥–∞–Ω", "user_id": user_id})
                        
                        # –ï—Å–ª–∏ –º—ã –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –≤–æ–ø—Ä–æ—Å, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                        if not found_full_question:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (–ø–æ–ª–Ω—ã–π_—Ç–µ–∫—Å—Ç_–Ω–µ_–Ω–∞–π–¥–µ–Ω)", 
                                        details={"–≤–æ–ø—Ä–æ—Å": current_question, "user_id": user_id})
            except Exception as e:
                logger.error("–ø–æ–ª—É—á–µ–Ω–∏–µ_–ø–æ–ª–Ω–æ–≥–æ_—Ç–µ–∫—Å—Ç–∞_–≤–æ–ø—Ä–æ—Å–∞", e, details={"user_id": user_id, "question": current_question})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–æ–Ω –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç current_question)
        options = self.questions_with_options.get(display_question, [])
        if not options:
            # –ï—Å–ª–∏ –¥–ª—è display_question –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è original_question
            options = self.questions_with_options.get(current_question, [])
            logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞", 
                                details={"–ø—Ä–∏—á–∏–Ω–∞": "–¥–ª—è display_question –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", "user_id": user_id})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤", 
                            details={"–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞": current_question_num+1, "–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤": len(options), "user_id": user_id})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–µ –≤–æ–ø—Ä–æ—Å–∞
        current_parent_answer = context.user_data.get('current_parent_answer')
        
        if current_parent_answer:
            logger.user_action(user_id, "–†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏", 
                            details={"—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π_–æ—Ç–≤–µ—Ç": current_parent_answer})
            
            # –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ—Ç–≤–µ—Ç—É
            parent_option = None
            for opt in options:
                if isinstance(opt, dict) and "text" in opt and opt["text"] == current_parent_answer:
                    parent_option = opt
                    break
            
            if parent_option:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã
                sub_options = parent_option.get("sub_options")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                free_text_prompt = parent_option.get("free_text_prompt", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                if sub_options is None or not isinstance(sub_options, list):
                    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Å–±—Ä–æ—Å (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ_–ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã)", 
                                 details={"–ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã": str(sub_options), "user_id": user_id})
                    context.user_data.pop('current_parent_answer', None)
                    return await self.send_question(update, context)
                
                # –ï—Å–ª–∏ —É –≤–∞—Ä–∏–∞–Ω—Ç–∞ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
                if free_text_prompt or sub_options == []:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    if free_text_prompt:
                        prompt_text = f"*{display_question}*\n\nüìù *{free_text_prompt}*"
                        logger.user_action(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞", 
                                        details={"–ø–æ–¥—Å–∫–∞–∑–∫–∞": free_text_prompt})
                    else:
                        prompt_text = f"*{display_question}*\n\nüìù *–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:*"
                    
                    await update.message.reply_text(
                        prompt_text,
                        parse_mode='Markdown',
                        reply_markup=ReplyKeyboardMarkup(
                            [[KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º")]],
                            resize_keyboard=True
                        )
                    )
                    logger.user_action(user_id, "–ó–∞–ø—Ä–æ—Å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", 
                                     details={"—Ç–∏–ø": "–ø–æ–¥–≤–æ–ø—Ä–æ—Å", "—Ç–µ–∫—Å—Ç_–ø–æ–¥—Å–∫–∞–∑–∫–∏": prompt_text[:50] + "..."})
                    return f"QUESTION_{current_question_num}_SUB"
                
                # –ï—Å—Ç—å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
                keyboard = []
                for sub_opt in sub_options:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                    if not ("–≤–æ–ø—Ä–æ—Å –¥–ª—è" in sub_opt.lower() or "–≤–≤–µ–¥–∏—Ç–µ" in sub_opt.lower()):
                        keyboard.append([KeyboardButton(sub_opt)])
                
                # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—Å–µ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã –±—ã–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
                # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
                if not keyboard:
                    free_text_prompt = sub_options[0] if sub_options else "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    prompt_text = f"*{display_question}*\n\nüìù *{free_text_prompt}*"
                    
                    await update.message.reply_text(
                        prompt_text,
                        parse_mode='Markdown',
                        reply_markup=ReplyKeyboardMarkup(
                            [[KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º")]],
                            resize_keyboard=True
                        )
                    )
                    logger.user_action(user_id, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞", 
                                   details={"—Ç–∏–ø": "–∏–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏", "–ø–æ–¥—Å–∫–∞–∑–∫–∞": free_text_prompt[:50]})
                    return f"QUESTION_{current_question_num}_SUB"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
                keyboard.append([KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º")])
                
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                await update.message.reply_text(
                    f"*{display_question}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
                logger.user_action(user_id, "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", 
                                details={"—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π_–æ—Ç–≤–µ—Ç": current_parent_answer, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": len(keyboard)-1})
                return f"QUESTION_{current_question_num}_SUB"
            else:
                # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                logger.warning(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π_–≤–∞—Ä–∏–∞–Ω—Ç_–Ω–µ_–Ω–∞–π–¥–µ–Ω)", 
                            details={"–≤–∞—Ä–∏–∞–Ω—Ç": current_parent_answer, "user_id": user_id})
                context.user_data.pop('current_parent_answer', None)
                return await self.send_question(update, context)
        
        # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–Ω–µ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç)
        # –ï—Å–ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
        if not options:
            await update.message.reply_text(
                f"*{display_question}*\n\nüìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            logger.user_action(user_id, "–ó–∞–ø—Ä–æ—Å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", 
                            details={"–≤–æ–ø—Ä–æ—Å": current_question_num+1, "—Ç–∏–ø": "–æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å"})
            return f"QUESTION_{current_question_num}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        for opt in options:
            if isinstance(opt, dict) and "text" in opt:
                option_text = opt["text"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º (free_text_prompt)
                has_free_text = isinstance(opt.get("sub_options"), list) and opt["sub_options"] == []
                has_prompt = "free_text_prompt" in opt
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if has_free_text and has_prompt:
                    logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤–≤–æ–¥–æ–º", 
                                       details={"–≤–∞—Ä–∏–∞–Ω—Ç": opt['text'], "–ø–æ–¥—Å–∫–∞–∑–∫–∞": opt.get('free_text_prompt', '')[:50], "user_id": user_id})
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ —Å–º–∞–π–ª–∏–∫–∞
                keyboard.append([KeyboardButton(option_text)])
            else:
                # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
                keyboard.append([KeyboardButton(str(opt))])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        await update.message.reply_text(
            f"*{display_question}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.user_action(user_id, "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏", 
                       details={"–Ω–æ–º–µ—Ä": current_question_num+1, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤": len(keyboard)})
        return f"QUESTION_{current_question_num}"
    
    async def handle_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        answer = update.message.text
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'answers'
        if 'answers' not in context.user_data:
            context.user_data['answers'] = []
            logger.warning(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (answers_init)", 
                        details={"user_id": user_id, "–ø—Ä–∏—á–∏–Ω–∞": "–æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –∫–ª—é—á 'answers'"})
        
        current_question_num = len(context.user_data['answers'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        if current_question_num == len(self.questions):
            if answer == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
                logger.user_action(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤", 
                               details={"–¥–µ–π—Å—Ç–≤–∏–µ": "–Ω–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"})
                start_time = datetime.now()
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    success = await self.sheets.async_save_answers(context.user_data['answers'], user_id)
                    
                    if success:
                        save_duration = (datetime.now() - start_time).total_seconds()
                        logger.data_processing("–æ—Ç–≤–µ—Ç—ã", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤", 
                                          details={"user_id": user_id, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": len(context.user_data['answers']), "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": f"{save_duration:.2f} —Å–µ–∫"})
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞
                        await self.finish_survey(update, context)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        logger.data_processing("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 
                                           details={"—Ä–µ–∂–∏–º": "–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π", "user_id": user_id})
                        asyncio.create_task(self.update_statistics_async())
                        
                        # –í–∞–∂–Ω–æ! –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        context.user_data.clear()
                        return ConversationHandler.END
                    else:
                        logger.error("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ_–æ—Ç–≤–µ—Ç–æ–≤", None, user_id=user_id, details={"operation": "save_answers", "status": "failed"})
                        await update.message.reply_text(
                            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                        )
                        return "CONFIRMING"
                except Exception as e:
                    logger.error("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ_–æ—Ç–≤–µ—Ç–æ–≤", e, user_id=user_id, details={"operation": "async_save_answers"})
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                    )
                    return "CONFIRMING"
            
            elif answer == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                context.user_data.clear()
                return await self.begin_survey(update, context)
            
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                    reply_markup=ReplyKeyboardMarkup([
                        [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                        [KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
                    ], resize_keyboard=True)
                )
                return CONFIRMING
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã –Ω–µ –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if current_question_num >= len(self.questions):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É (question_index_out_of_range)",
                          details={"user_id": user_id, "current_num": current_question_num, "total_questions": len(self.questions)})
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
            context.user_data.clear()
            return await self.begin_survey(update, context)
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        current_question = self.questions[current_question_num]
        available_options = self.questions_with_options[current_question]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–ø–æ–¥–≤–æ–ø—Ä–æ—Å–æ–≤)
        if current_question_num < len(self.questions) and context.user_data.get('current_parent_answer'):
            parent_answer = context.user_data.get('current_parent_answer')
            parent_option = None
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            for opt in available_options:
                if isinstance(opt, dict) and "text" in opt and opt["text"] == parent_answer:
                    parent_option = opt
                    break
            
            if parent_option:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ê–Ω–∞–ª–∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞", 
                                   details={"–≤–∞—Ä–∏–∞–Ω—Ç": parent_answer, "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": str(parent_option)[:100], "user_id": user_id})
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
                if answer == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
                    context.user_data.pop('current_parent_answer', None)
                    return await self.send_question(update, context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ sub_options (—Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç)
                if "sub_options" in parent_option and isinstance(parent_option["sub_options"], list) and parent_option["sub_options"] == []:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥—Å–∫–∞–∑–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
                    free_text_prompt = parent_option.get("free_text_prompt", "")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    if free_text_prompt:
                        full_answer = f"{parent_answer} - {answer}"
                        logger.user_action(user_id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", 
                                        details={"—Ç–∏–ø": "—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º", "–æ—Ç–≤–µ—Ç": full_answer, "–≤–æ–ø—Ä–æ—Å": free_text_prompt[:50]})
                    else:
                        full_answer = f"{parent_answer} - {answer}"
                        logger.user_action(user_id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", 
                                        details={"–æ—Ç–≤–µ—Ç": full_answer})
                    
                    context.user_data['answers'].append(full_answer)
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                    context.user_data.pop('current_parent_answer', None)
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    return await self.send_question(update, context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                sub_options = parent_option.get("sub_options")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                if "free_text_prompt" in parent_option and parent_option["free_text_prompt"]:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –ø—É—Å—Ç—ã–µ
                    free_text_prompt = parent_option["free_text_prompt"]
                    full_answer = f"{parent_answer} - {answer}"
                    logger.user_action(user_id, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", 
                                    details={"—Ç–∏–ø": "–ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏–∑ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", "–ø–æ–¥—Å–∫–∞–∑–∫–∞": free_text_prompt[:50]})
                    
                    context.user_data['answers'].append(full_answer)
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                    context.user_data.pop('current_parent_answer', None)
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    return await self.send_question(update, context)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–æ —É –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                if sub_options is None or not isinstance(sub_options, list) or not sub_options:
                    # –ù–µ—Ç –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ sub_options –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
                    context.user_data['answers'].append(parent_answer)
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                    context.user_data.pop('current_parent_answer', None)
                    logger.user_action(user_id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞", 
                                   details={"—Ç–∏–ø": "–±–µ–∑ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", "–æ—Ç–≤–µ—Ç": parent_answer})
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    return await self.send_question(update, context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                if answer not in sub_options:
                    # –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                    keyboard = [[KeyboardButton(sub_opt)] for sub_opt in sub_options]
                    keyboard.append([KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º")])
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    
                    await update.message.reply_text(
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                        reply_markup=reply_markup
                    )
                    return f"QUESTION_{current_question_num}_SUB"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π + –¥–æ—á–µ—Ä–Ω–∏–π)
                full_answer = f"{parent_answer} - {answer}"
                context.user_data['answers'].append(full_answer)
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                context.user_data.pop('current_parent_answer', None)
                logger.user_action(user_id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", 
                               details={"–æ—Ç–≤–µ—Ç": full_answer})
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                return await self.send_question(update, context)
            else:
                # –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º context.user_data['current_parent_answer']
                logger.warning(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π_–≤–∞—Ä–∏–∞–Ω—Ç_–Ω–µ_–Ω–∞–π–¥–µ–Ω)", 
                             details={"–≤–∞—Ä–∏–∞–Ω—Ç": current_parent_answer, "user_id": user_id})
                context.user_data.pop('current_parent_answer', None)
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
                return await self.send_question(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π
        available_options = self.questions_with_options.get(current_question, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        is_valid_option = False
        selected_option = None
        
        for opt in available_options:
            if isinstance(opt, dict) and "text" in opt and opt["text"] == answer:
                is_valid_option = True
                selected_option = opt
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞", 
                                   details={"–æ—Ç–≤–µ—Ç": answer, "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": str(selected_option)[:100], "user_id": user_id})
                break
            elif not isinstance(opt, dict) and str(opt) == answer:
                is_valid_option = True
                break
        
        if not is_valid_option:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤,
            # —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            context.user_data['answers'].append(answer)
            logger.user_action(user_id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞", 
                           details={"—Ç–∏–ø": "—Å–≤–æ–±–æ–¥–Ω—ã–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", "–æ—Ç–≤–µ—Ç": answer})
        else:
            # –ï—Å–ª–∏ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –µ—Å—Ç—å –∫–ª—é—á sub_options
            if selected_option and "sub_options" in selected_option:
                sub_options = selected_option.get("sub_options")
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –µ–≥–æ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
                logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", 
                                   details={"–æ—Ç–≤–µ—Ç": answer, "—Ç–∏–ø_–ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤": str(type(sub_options)), "user_id": user_id})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø sub_options –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                if isinstance(sub_options, list):
                    if sub_options == []:  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
                        # –≠—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (—è–≤–Ω–æ —É–∫–∞–∑–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
                        context.user_data['current_parent_answer'] = answer
                        
                        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
                        free_text_prompt = selected_option.get("free_text_prompt", "")
                        if free_text_prompt:
                            logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞", 
                                               details={"–≤–æ–ø—Ä–æ—Å_–¥–ª—è_–≤–≤–æ–¥–∞": free_text_prompt[:50], "user_id": user_id})
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ free_text_prompt, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ sub_options
                        if not free_text_prompt and sub_options and len(sub_options) > 0:
                            free_text_prompt = sub_options[0]
                            selected_option["free_text_prompt"] = free_text_prompt
                        
                        selected_option["sub_options"] = []  # –î–µ–ª–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ–±–æ–∑–Ω–∞—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
                        
                        logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏", 
                                          details={"—Ç–∏–ø": "–≤ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥", "–ø–æ–¥—Å–∫–∞–∑–∫–∞": free_text_prompt[:50], "user_id": user_id})
                        logger.user_action(user_id, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞", 
                                       details={"—Ç–∏–ø": "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", "–æ—Ç–≤–µ—Ç": answer})
                        return await self.send_question(update, context)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                    elif sub_options and isinstance(sub_options[0], str) and ("–≤–æ–ø—Ä–æ—Å –¥–ª—è" in sub_options[0].lower() or "–≤–≤–µ–¥–∏—Ç–µ" in sub_options[0].lower()):
                        # –≠—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
                        context.user_data['current_parent_answer'] = answer
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ free_text_prompt
                        free_text_prompt = sub_options[0] if sub_options and len(sub_options) > 0 else "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç"
                        selected_option["free_text_prompt"] = free_text_prompt
                        selected_option["sub_options"] = []  # –î–µ–ª–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ–±–æ–∑–Ω–∞—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
                        
                        logger.data_processing("–≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏", 
                                          details={"—Ç–∏–ø": "–≤ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥", "–ø–æ–¥—Å–∫–∞–∑–∫–∞": free_text_prompt[:50], "user_id": user_id})
                        logger.user_action(user_id, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞", 
                                       details={"—Ç–∏–ø": "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", "–æ—Ç–≤–µ—Ç": answer})
                        return await self.send_question(update, context)
                    elif sub_options:  # –ù–µ–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –≤—ã–±–æ—Ä –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞
                        # –ï—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
                        context.user_data['current_parent_answer'] = answer
                        logger.user_action(user_id, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", 
                                       details={"—Ç–∏–ø": "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", "–æ—Ç–≤–µ—Ç": answer})
                        return await self.send_question(update, context)
                
            # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            context.user_data['answers'].append(answer)
            logger.user_action(user_id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞", 
                           details={"—Ç–∏–ø": "–±–µ–∑ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", "–æ—Ç–≤–µ—Ç": answer})
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        return await self.send_question(update, context)
    
    async def finish_survey(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –∫–æ–¥–∞
        return await super().finish_survey(update, context)
    
    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞"""
        user_id = update.effective_user.id
        logger.user_action(user_id, "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", details={"—Ç–∏–ø": "–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"})
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
        total_surveys = self.sheets.get_total_surveys_count()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        statistics = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞*\nüë• *–í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {total_surveys}*\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_data = self.sheets.get_statistics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if not stats_data:
            statistics = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*. –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await update.message.reply_text(
                statistics,
                reply_markup=ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )
            
            return ConversationHandler.END
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
        grouped_stats = {}
        for question, option, count in stats_data:
            if question not in grouped_stats:
                grouped_stats[question] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ –æ—Ç–≤–µ—Ç–∞
            grouped_stats[question].append((option, count))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for question, options_data in grouped_stats.items():
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
            statistics += f"*{question}*\n"
            
            # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            main_options = {}
            sub_options = {}
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            total_answers = sum(count for _, count in options_data)
            
            # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
            for option, count in options_data:
                if " - " in option:
                    # –≠—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    main_part, sub_part = option.split(" - ", 1)
                    if main_part not in sub_options:
                        sub_options[main_part] = []
                    sub_options[main_part].append((sub_part, count))
                else:
                    # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    main_options[option] = count
            
            # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∏—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            for option, count in main_options.items():
                percentage = (count / total_answers * 100) if total_answers > 0 else 0
                statistics += f"‚îî {option}: {count} ({percentage:.1f}%)\n"
                
                # –ï—Å–ª–∏ —É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ, –≤—ã–≤–æ–¥–∏–º –∏—Ö
                if option in sub_options:
                    for sub_option, sub_count in sub_options[option]:
                        sub_percentage = (sub_count / total_answers * 100) if total_answers > 0 else 0
                        statistics += f"   ‚îî {sub_option}: {sub_count} ({sub_percentage:.1f}%)\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
            statistics += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(statistics) > 4000:
            logger.warning(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏–µ–Ω–∏–µ (–¥–ª–∏–Ω–Ω–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)", 
                         details={"–¥–ª–∏–Ω–∞": len(statistics), "user_id": user_id})
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
            parts = []
            current_part = ""
            for line in statistics.split('\n'):
                if len(current_part) + len(line) + 1 > 4000:
                    parts.append(current_part)
                    current_part = line
                else:
                    current_part += line + '\n'
            
            if current_part:
                parts.append(current_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for i, part in enumerate(parts):
                await update.message.reply_text(
                    part,
                    reply_markup=ReplyKeyboardRemove() if i == len(parts) - 1 else None,
                    parse_mode='Markdown'
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
            await update.message.reply_text(
                statistics,
                reply_markup=ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )
        
        return ConversationHandler.END

    async def update_statistics_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞"""
        try:
            start_time = time.time()
            logger.data_processing("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", details={"—ç—Ç–∞–ø": "–Ω–∞—á–∞–ª–æ"})
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await sheets_cache.execute_with_rate_limit(self.sheets.update_statistics)
            
            duration = time.time() - start_time
            logger.data_processing("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", details={"—ç—Ç–∞–ø": "–∑–∞–≤–µ—Ä—à–µ–Ω–æ", "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": f"{duration:.2f} —Å–µ–∫"})
        except Exception as e:
            try:
                duration = time.time() - start_time
            except:
                duration = 0
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (stat_update_failed)", 
                         exception=e, details={"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": f"{duration:.2f} —Å–µ–∫"}) 